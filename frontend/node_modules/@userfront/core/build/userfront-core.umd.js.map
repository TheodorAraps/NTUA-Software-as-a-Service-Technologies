{"version":3,"file":"userfront-core.umd.js","sources":["../src/store.js","../src/utils.js","../src/user.js","../src/api.js","../src/cookies.js","../src/tokens.js","../src/refresh.js","../src/url.js","../src/password.js","../src/sso.js","../src/link.js","../src/verificationCode.js","../src/totp.js","../src/logout.js","../src/constants.js","../src/mode.js","../src/user.methods.js","../src/index.js","../src/login.js","../src/saml.js","../src/signup.js","../src/mfa.js"],"sourcesContent":["export const store = {\n  user: {},\n  tokens: {},\n  mode: \"live\",\n};\n","/**\n * This file is for zero-dependency utilities that can\n * be imported by any other file. Don't add any imports\n * to this file other than constants\n */\n\n/**\n * Get the unverified base64 decoded payload of a JWT\n *\n * @param {String} token - JSON Web Token\n * @returns {Object}\n */\nexport function getJWTPayload(token) {\n  try {\n    const encodedPayload = token\n      .split(\".\")[1]\n      .replace(\"-\", \"+\")\n      .replace(\"_\", \"/\");\n    return JSON.parse(atob(encodedPayload));\n  } catch (error) {\n    console.error(\"Problem decoding JWT payload\", error);\n  }\n}\n\nexport function throwFormattedError(error) {\n  if (!error) return;\n  if (typeof error === \"string\") throw new Error(error);\n  if (error?.response?.data?.message) {\n    throw new Error(error.response.data.message);\n  }\n  throw error;\n}\n","import { store } from \"./store.js\";\nimport { getJWTPayload } from \"./utils.js\";\n\n/**\n * Define the store.user object based on the ID token\n */\nexport function setUser() {\n  if (!store.tokens.idToken) {\n    return console.warn(\"Cannot define user: missing ID token\");\n  }\n\n  store.user = store.user || {};\n  const idTokenPayload = getJWTPayload(store.tokens.idToken);\n\n  // Set basic user information properties from ID token\n  const propsToDefine = [\n    \"email\",\n    \"phoneNumber\",\n    \"username\",\n    \"name\",\n    \"image\",\n    \"data\",\n    \"confirmedAt\",\n    \"createdAt\",\n    \"updatedAt\",\n    \"mode\",\n    \"userId\",\n    \"userUuid\",\n    \"tenantId\",\n    \"isConfirmed\",\n  ];\n  for (const prop of propsToDefine) {\n    if (prop === \"update\") return;\n    store.user[prop] = idTokenPayload[prop];\n  }\n}\n\n/**\n * Remove all user information\n */\nexport function unsetUser() {\n  for (const attr in store.user) {\n    if (typeof store.user[attr] !== \"function\") {\n      delete store.user[attr];\n    }\n  }\n}\n\n/**\n * Export the store.user object with the update method added\n */\nexport const user = store.user;\n","import axios from \"axios\";\nimport { store } from \"./store.js\";\n\n// Replace multiple slashes // with single slash / (except in the protocol)\nfunction reduceSlashes(str) {\n  return str.replace(/([^:]\\/)\\/+/g, \"$1\");\n}\n\n/**\n * Perform a GET request\n * @param {String} path\n * @param {Object} options\n * @returns {Object} response body\n */\nexport async function get(path, options) {\n  const url = reduceSlashes(`${store.baseUrl}${path}`);\n  return axios.get(url, options);\n}\n\n/**\n * Perform a POST request\n * @param {String} path\n * @param {Object} payload\n * @param {Object} options\n * @returns {Object} response body\n */\nexport async function post(path, payload, options) {\n  const url = reduceSlashes(`${store.baseUrl}${path}`);\n  return axios.post(url, payload, options);\n}\n\n/**\n * Perform a PUT request\n * @param {String} path\n * @param {Object} payload\n * @param {Object} options\n * @returns {Object} response body\n */\nexport async function put(path, payload, options) {\n  const url = reduceSlashes(`${store.baseUrl}${path}`);\n  return axios.put(url, payload, options);\n}\n\nexport default {\n  get,\n  post,\n  put,\n};\n","import Cookies from \"js-cookie\";\nimport { store } from \"./store.js\";\nimport { setTokensFromCookies, unsetTokens } from \"./tokens.js\";\n\n/**\n * Set a cookie value based on the given options.\n * @param {String} value\n * @param {Object} options\n * @param {String} type\n */\nexport function setCookie(value, options, type) {\n  const cookieName = `${type}.${store.tenantId}`;\n  options = options || {\n    secure: store.mode === \"live\",\n    sameSite: \"Lax\",\n  };\n  if (type === \"refresh\") {\n    options.sameSite = \"Strict\";\n  }\n  Cookies.set(cookieName, value, options);\n}\n\n/**\n * Remove a cookie by name, regardless of its cookie setting(s).\n * @param {String} name\n */\nfunction removeCookie(name) {\n  // Define all possible path and domain combinations\n  let paths, domains;\n  try {\n    const path = window.location.pathname;\n    const hostname = window.location.hostname;\n    const hostnameParts = hostname.split(\".\");\n    const primaryDomain = hostnameParts.slice(-2).join(\".\");\n    paths = [undefined, path, \"/\"];\n    domains = [\n      undefined,\n      hostname,\n      `.${hostname}`,\n      primaryDomain,\n      `.${primaryDomain}`,\n    ];\n  } catch (err) {\n    paths = [undefined, \"/\"];\n    domains = [undefined];\n  }\n\n  // Iterate over paths and domains, and remove cookies if present\n  paths.map((path) => {\n    domains.map((domain) => {\n      const options = {};\n      if (domain) options.domain = domain;\n      if (path) options.path = path;\n      Cookies.remove(name, options);\n    });\n  });\n}\n\n/**\n * Remove all auth cookies (access, id, refresh).\n */\nexport function removeAllCookies() {\n  removeCookie(store.tokens.accessTokenName);\n  removeCookie(store.tokens.idTokenName);\n  removeCookie(store.tokens.refreshTokenName);\n  unsetTokens();\n}\n\n/**\n * Set the cookies from a tokens object, and add to the local store.\n * @param {Object} tokens\n */\nexport function setCookiesAndTokens(tokens) {\n  setCookie(tokens.access.value, tokens.access.cookieOptions, \"access\");\n  setCookie(tokens.id.value, tokens.id.cookieOptions, \"id\");\n  if (tokens.refresh && tokens.refresh.value) {\n    setCookie(tokens.refresh.value, tokens.refresh.cookieOptions, \"refresh\");\n  }\n  setTokensFromCookies();\n}\n","import Cookies from \"js-cookie\";\nimport { store } from \"./store.js\";\nimport { setUser, unsetUser } from \"./user.js\";\nimport { refresh } from \"./refresh.js\";\n\nstore.tokens = store.tokens || {};\nstore.tokens.refresh = refresh;\n\nexport function setTokenNames() {\n  store.tokens = store.tokens || {};\n  store.tokens.accessTokenName = `access.${store.tenantId}`;\n  store.tokens.idTokenName = `id.${store.tenantId}`;\n  store.tokens.refreshTokenName = `refresh.${store.tenantId}`;\n}\n\n/**\n * Set and then return the access token\n */\nexport function accessToken() {\n  store.tokens.accessToken = Cookies.get(store.tokens.accessTokenName);\n  return store.tokens.accessToken;\n}\n\n/**\n * Set and then return the ID token\n */\nexport function idToken() {\n  store.tokens.idToken = Cookies.get(store.tokens.idTokenName);\n  return store.tokens.idToken;\n}\n\n/**\n * Define the store token values from the cookie values.\n */\nexport function setTokensFromCookies() {\n  const tokenNames = [\"access\", \"id\", \"refresh\"];\n  tokenNames.map((tokenName) => {\n    try {\n      const token = Cookies.get(store.tokens[`${tokenName}TokenName`]);\n      store.tokens[`${tokenName}Token`] = token;\n\n      // Set the user object whenever the ID token is set\n      if (tokenName === \"id\" && token) {\n        setUser();\n      }\n    } catch (error) {\n      console.warn(`Problem setting ${tokenName} token.`);\n    }\n  });\n}\n\n/**\n * Set the store token values to undefined\n */\nexport function unsetTokens() {\n  store.tokens.accessToken = undefined;\n  store.tokens.idToken = undefined;\n  store.tokens.refreshToken = undefined;\n  unsetUser();\n}\n\n/**\n * Export the store.tokens object\n */\nexport const tokens = store.tokens;\n\n// NOTE Commenting this out 6/11/21 because the packages it relies on (jsonwebtoken & jwks-rsa)\n// both cause a lot of bloat. If we want to verify tokens, this is a nice way to do it, but\n// we need to find libraries designed for the browser instead of node.\n/**\n * Verify the provided token\n * @param {String} token\n * @returns {Promise<void>} The provided token has been verified if `verifyToken` resolves without error\n */\n// export async function verifyToken(token) {\n//   if (!token) throw new Error(\"Missing token\");\n\n//   let publicKey;\n//   try {\n//     const decodedToken = jwt.decode(token, { complete: true });\n//     if (!decodedToken.header || !decodedToken.header.kid) {\n//       throw new Error(\"Token kid not defined\");\n//     }\n\n//     const client = new JwksClient({\n//       jwksUri: `${apiUrl}tenants/${store.tenantId}/jwks/${store.mode}`,\n//       requestHeaders: { origin: window.location.origin },\n//     });\n\n//     const key = await client.getSigningKey(decodedToken.header.kid);\n//     publicKey = key.getPublicKey();\n//   } catch (error) {\n//     throw error;\n//   }\n\n//   if (!publicKey) {\n//     throw new Error(\"Public key not found\");\n//   }\n\n//   try {\n//     jwt.verify(token, publicKey);\n//   } catch (error) {\n//     throw new Error(\"Token verification failed\");\n//   }\n\n//   return Promise.resolve();\n// }\n","import Cookies from \"js-cookie\";\nimport { get } from \"./api.js\";\nimport { setCookiesAndTokens } from \"./cookies.js\";\nimport { store } from \"./store.js\";\n// import { getIframe, postMessageAsPromise } from \"./iframe.js\";\nimport { throwFormattedError } from \"./utils.js\";\n\n/**\n * Refresh the access and ID tokens\n * - When in test mode, uses the basic refresh method\n * - For tenants without a custom SSL certificate, uses the basic refresh method\n * - For tenants with a custom SSL certificate and in live mode, uses the httpOnly refresh method\n * @returns {Promise}\n */\nexport async function refresh() {\n  try {\n    await basicRefresh();\n  } catch (error) {\n    console.warn(`Refresh failed: ${error.message}`);\n  }\n}\n\n/**\n * Use a regular (non-httpOnly) cookie to refresh the access and ID tokens.\n *\n * The basic refresh method is used automatically in test mode and in live\n * mode whenever an SSL certificate has not been set up.\n */\nasync function basicRefresh() {\n  const refreshToken = Cookies.get(store.tokens.refreshTokenName);\n  try {\n    const { data, status } = await get(`/auth/refresh`, {\n      headers: {\n        authorization: `Bearer ${refreshToken}`,\n      },\n    });\n    if (status !== 200) {\n      throw new Error(data.message || \"Problem with request\");\n    }\n    if (data.tokens) {\n      setCookiesAndTokens(data.tokens);\n      return data;\n    } else {\n      throw new Error(\"Problem setting cookies\");\n    }\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n// TODO re-enable httpOnly refresh method once new endpoints are stable [06/15/21]\n/**\n *\n * The httpOnly refresh method is only available for tenants with configured\n * SSL certificates while in live mode.\n */\n// async function httpOnlyRefresh() {\n//   const iframe = getIframe();\n//   if (!iframe) return;\n//   return postMessageAsPromise({\n//     type: \"refresh\",\n//     tenantId: store.tenantId,\n//   });\n// }\n\n/**\n * Use a sessionId and nonce to set the iframe refresh token\n * @param {String} sessionId\n * @param {String} nonce\n * @returns {Promise}\n */\nexport async function exchange({ sessionId, nonce }) {\n  return;\n\n  // TODO re-enable httpOnly exchange method once new endpoints are stable [06/15/21]\n  // --------------------------\n  // const iframe = getIframe();\n  // if (!iframe) return;\n  // return postMessageAsPromise({\n  //   type: \"exchange\",\n  //   tenantId: store.tenantId,\n  //   payload: {\n  //     sessionId,\n  //     nonce,\n  //   },\n  // });\n}\n","import { get } from \"./api.js\";\nimport { store } from \"./store.js\";\nimport { removeAllCookies } from \"./cookies.js\";\n\n/**\n * Get the value of a query attribute, e.g. ?attr=value\n * @param {String} attrName\n */\nexport function getQueryAttr(attrName) {\n  if (\n    typeof window !== \"object\" ||\n    typeof window.location !== \"object\" ||\n    !window.location.href ||\n    window.location.href.indexOf(`${attrName}=`) < 0\n  ) {\n    return;\n  }\n  return decodeURIComponent(\n    window.location.href.split(`${attrName}=`)[1].split(\"&\")[0]\n  );\n}\n\n/**\n * Redirect the browser based on explicit redirect input path, or the API response\n * @property {String|Boolean} redirect A path to redirect to, or false to not redirect\n * @property {Object} data The response object from the API\n * @returns\n */\nexport const handleRedirect = ({ redirect, data }) => {\n  if (redirect === false) return;\n  const path = redirect || getQueryAttr(\"redirect\") || data.redirectTo || \"/\";\n  redirectToPath(path);\n};\n\n// TODO replace with direct check of the access token.\n/**\n * If the access token is valid, redirect the browser to the\n * tenant's login redirection path (path after login).\n */\nexport async function redirectIfLoggedIn({ redirect } = {}) {\n  if (!store.tokens.accessToken) {\n    return removeAllCookies();\n  }\n\n  // Redirect to a provided path (check options first, then url querystring)\n  if (redirect) {\n    return redirectToPath(redirect);\n  } else if (getQueryAttr(\"redirect\")) {\n    return redirectToPath(getQueryAttr(\"redirect\"));\n  }\n\n  // If no path was provided, look up the path and then redirect there\n  try {\n    const { data } = await get(`/self`, {\n      headers: {\n        authorization: `Bearer ${store.tokens.accessToken}`,\n      },\n    });\n    if (data.tenant && data.tenant.loginRedirectPath) {\n      redirectToPath(data.tenant.loginRedirectPath);\n    }\n  } catch (err) {\n    removeAllCookies();\n  }\n}\n\n/**\n * Redirect to path portion of a URL.\n */\nexport function redirectToPath(pathOrUrl) {\n  // Return if no pathOrUrl, or if SSR or mobile\n  if (\n    !pathOrUrl ||\n    typeof document !== \"object\" ||\n    typeof window !== \"object\"\n  ) {\n    return;\n  }\n  try {\n    document && window;\n  } catch (error) {\n    return;\n  }\n\n  // Perform hard redirect\n  const el = document.createElement(\"a\");\n  el.href = pathOrUrl;\n  let path = `${el.pathname}${el.hash}${el.search}`;\n  if (el.pathname !== window.location.pathname) {\n    window.location.assign(path);\n  }\n}\n","import { post, put } from \"./api.js\";\nimport { setCookiesAndTokens } from \"./cookies.js\";\nimport { store } from \"./store.js\";\nimport { getQueryAttr, handleRedirect } from \"./url.js\";\nimport { throwFormattedError } from \"./utils.js\";\nimport { exchange } from \"./refresh.js\";\n\n/**\n * Register a new user with username, name, email, and password.\n * Redirect the browser after successful signup based on the redirectTo value returned.\n * @param {String} username\n * @param {String} name\n * @param {String} email\n * @param {String} password\n * @param {Object} userData - alias for the user.data object, since \"data\" is used in the response\n * @param {String} redirect - do not redirect if false, or redirect to a specific path\n */\nexport async function signupWithPassword({\n  username,\n  name,\n  email,\n  password,\n  userData,\n  redirect,\n} = {}) {\n  try {\n    const { data } = await post(`/auth/create`, {\n      tenantId: store.tenantId,\n      username,\n      name,\n      email,\n      password,\n      data: userData,\n    });\n    if (data.tokens) {\n      setCookiesAndTokens(data.tokens);\n      await exchange(data);\n      handleRedirect({ redirect, data });\n      return data;\n    } else {\n      throw new Error(\"Please try again.\");\n    }\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Log a user in with email/username and password.\n * Redirect the browser after successful login based on the redirectTo value returned.\n * @param {Object} options\n */\nexport async function loginWithPassword({\n  email,\n  username,\n  emailOrUsername,\n  password,\n  redirect,\n}) {\n  try {\n    const { data } = await post(`/auth/basic`, {\n      tenantId: store.tenantId,\n      emailOrUsername: email || username || emailOrUsername,\n      password,\n    });\n\n    if (data.hasOwnProperty(\"tokens\")) {\n      setCookiesAndTokens(data.tokens);\n      await exchange(data);\n      handleRedirect({ redirect, data });\n      return data;\n    }\n\n    if (data.hasOwnProperty(\"firstFactorCode\")) {\n      return data;\n    }\n\n    throw new Error(\"Please try again.\");\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Send a password reset link to the provided email.\n * @param {String} email\n */\nexport async function sendResetLink(email) {\n  try {\n    const { data } = await post(`/auth/reset/link`, {\n      email,\n      tenantId: store.tenantId,\n    });\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Set a user's password with their link credentials or JWT access token.\n *\n * If no method is provided, the order is:\n * - Check for link credentials; then\n * - Check for a JWT access token first\n *\n * @property {String} method (optional) \"link\" or \"jwt\"\n * @property {String} password\n * @property {String} existingPassword\n * @property {String} uuid\n * @property {String} token\n * @property {String} redirect\n * @returns\n */\nexport async function updatePassword({\n  method,\n  password,\n  existingPassword,\n  uuid,\n  token,\n  redirect,\n}) {\n  switch (method) {\n    // Allow for explicit setting of method\n    case \"link\":\n      return updatePasswordWithLink({ uuid, token, password, redirect });\n    case \"jwt\":\n      return updatePasswordWithJwt({ password, existingPassword });\n    default:\n      // Default (no method provided) is to look for link credentials first, then JWT access token\n      token = token || getQueryAttr(\"token\");\n      uuid = uuid || getQueryAttr(\"uuid\");\n      if (uuid && token) {\n        return updatePasswordWithLink({ uuid, token, password, redirect });\n      } else if (store.tokens.accessToken) {\n        return updatePasswordWithJwt({ password, existingPassword });\n      } else {\n        throw new Error(\n          \"updatePassword() was called without link credentials (token & uuid) or a JWT access token.\"\n        );\n      }\n  }\n}\n\nexport const resetPassword = updatePassword;\n\nexport async function updatePasswordWithLink({\n  uuid,\n  token,\n  password,\n  redirect,\n}) {\n  try {\n    token = token || getQueryAttr(\"token\");\n    uuid = uuid || getQueryAttr(\"uuid\");\n    if (!token || !uuid) throw new Error(\"Missing token or uuid\");\n    const { data } = await put(`/auth/reset`, {\n      tenantId: store.tenantId,\n      uuid,\n      token,\n      password,\n    });\n    if (data.tokens) {\n      setCookiesAndTokens(data.tokens);\n      handleRedirect({ redirect, data });\n      return data;\n    } else {\n      throw new Error(\n        \"There was a problem resetting your password. Please try again.\"\n      );\n    }\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\nexport async function updatePasswordWithJwt({ password, existingPassword }) {\n  try {\n    if (!store.tokens.accessToken) {\n      throw new Error(\n        `updatePassword({ method: \"jwt\" }) was called without a JWT access token.`\n      );\n    }\n\n    const { data } = await put(\n      `/auth/basic`,\n      {\n        tenantId: store.tenantId,\n        password,\n        existingPassword,\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${store.tokens.accessToken}`,\n        },\n      }\n    );\n\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n","import { store } from \"./store.js\";\nimport { getQueryAttr } from \"./url.js\";\n\nexport function getProviderLink({ provider, redirect }) {\n  if (!provider) throw new Error(\"Missing provider\");\n  if (!store.tenantId) throw new Error(\"Missing tenantId\");\n\n  let url = `${store.baseUrl}auth/${provider}/login?tenant_id=${store.tenantId}&origin=${window.location.origin}`;\n\n  let redirectTo = redirect || getQueryAttr(\"redirect\");\n  if (redirect === false) {\n    redirectTo = typeof document === \"object\" && document.location.pathname;\n  }\n  if (redirectTo) {\n    url += `&redirect=${encodeURIComponent(redirectTo)}`;\n  }\n\n  return url;\n}\n\n/**\n * Log in or register a user via SSO provider.\n * Redirect the browser after successful authentication and 302 redirect from server.\n * @param {String} provider Name of SSO provider\n * @param {String} redirect - do not redirect if false, or redirect to given path\n */\nexport function signonWithSso({ provider, redirect }) {\n  if (!provider) throw new Error(\"Missing provider\");\n  const url = getProviderLink({ provider, redirect });\n  window.location.assign(url);\n}\n","import { post, put } from \"./api.js\";\nimport { setCookiesAndTokens } from \"./cookies.js\";\nimport { store } from \"./store.js\";\nimport { getQueryAttr, handleRedirect } from \"./url.js\";\nimport { exchange } from \"./refresh.js\";\nimport { throwFormattedError } from \"./utils.js\";\n\n/**\n * Log a user in with a token/uuid combo passed into the function or\n * in the URL querystring. ?token=...&uuid=...\n * @param {String} token\n * @param {UUID} uuid\n * @param {String} redirect - do not redirect if false, or redirect to given path\n */\nexport async function loginWithLink({ token, uuid, redirect } = {}) {\n  try {\n    token = token || getQueryAttr(\"token\");\n    uuid = uuid || getQueryAttr(\"uuid\");\n    if (!token || !uuid) return;\n\n    const { data } = await put(\"/auth/link\", {\n      token,\n      uuid,\n      tenantId: store.tenantId,\n    });\n\n    if (data.hasOwnProperty(\"tokens\")) {\n      setCookiesAndTokens(data.tokens);\n      await exchange(data);\n      handleRedirect({ redirect, data });\n      return data;\n    }\n\n    if (data.hasOwnProperty(\"firstFactorCode\")) {\n      return data;\n    }\n\n    throw new Error(\"Problem logging in.\");\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Send a login link to the provided email.\n * @param {String} email\n */\nexport async function sendLoginLink(email) {\n  try {\n    const { data } = await post(`/auth/link`, {\n      email,\n      tenantId: store.tenantId,\n    });\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Create or update a user and send them a link to log in.\n * @param {Object} inputs\n */\nexport async function sendPasswordlessLink({\n  email,\n  name,\n  username,\n  userData,\n  options,\n}) {\n  try {\n    const { data } = await post(`/auth/link`, {\n      email,\n      name,\n      username,\n      data: userData,\n      options,\n      tenantId: store.tenantId,\n    });\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n","import { post, put } from \"./api.js\";\nimport { setCookiesAndTokens } from \"./cookies.js\";\nimport { store } from \"./store.js\";\nimport { handleRedirect } from \"./url.js\";\nimport { exchange } from \"./refresh.js\";\nimport { throwFormattedError } from \"./utils.js\";\n\n/**\n * Verify that proper identifier is available for the channel\n * @property {String} channel \"sms\" or \"email\"\n * @property {String} phoneNumber\n * @property {String} email\n */\nfunction enforceChannel({ channel, phoneNumber, email }) {\n  if (channel !== \"sms\" && channel !== \"email\") {\n    throw new Error(\"Invalid channel\");\n  }\n  if (channel === \"sms\" && !phoneNumber) {\n    throw new Error(`SMS verification code requires \"phoneNumber\"`);\n  } else if (channel === \"email\" && !email) {\n    throw new Error(`Email verification code requires \"email\"`);\n  }\n}\n\n/**\n * Send a verification code to the provided email address or phone number.\n * @property {String} channel \"sms\" (default) or \"email\"\n * @property {String} phoneNumber\n * @property {String} email\n * @property {String} name\n * @property {String} username\n * @property {Object} data\n */\nexport async function sendVerificationCode({\n  channel = \"sms\",\n  phoneNumber,\n  email,\n  name,\n  username,\n  data,\n}) {\n  try {\n    enforceChannel({\n      channel,\n      phoneNumber,\n      email,\n    });\n\n    const { data: res } = await post(`/auth/code`, {\n      channel,\n      email,\n      phoneNumber,\n      name,\n      username,\n      data,\n      tenantId: store.tenantId,\n    });\n    return res;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Log a user in with a token/uuid combo passed into the function or\n * in the URL querystring. ?token=...&uuid=...\n * @param {String} token\n * @param {UUID} uuid\n * @param {String} redirect - do not redirect if false, or redirect to given path\n */\nexport async function loginWithVerificationCode({\n  channel,\n  verificationCode,\n  email,\n  phoneNumber,\n  redirect,\n} = {}) {\n  try {\n    enforceChannel({\n      channel,\n      phoneNumber,\n      email,\n    });\n\n    const { data } = await put(`/auth/code`, {\n      channel,\n      verificationCode,\n      email,\n      phoneNumber,\n      tenantId: store.tenantId,\n    });\n\n    if (data.hasOwnProperty(\"tokens\")) {\n      setCookiesAndTokens(data.tokens);\n      await exchange(data);\n      handleRedirect({ redirect, data });\n      return data;\n    }\n\n    if (data.hasOwnProperty(\"firstFactorCode\")) {\n      return data;\n    }\n\n    throw new Error(\"Problem logging in.\");\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n","import { get, post } from \"./api.js\";\nimport { setCookiesAndTokens } from \"./cookies.js\";\nimport { store } from \"./store.js\";\nimport { handleRedirect } from \"./url.js\";\nimport { exchange } from \"./refresh.js\";\nimport { throwFormattedError } from \"./utils.js\";\n\n/**\n * Log a user in with a TOTP authenticator code or a TOTP backup code,\n * plus an identifier for the user (e.g. userId, userUuid, or email)\n *\n * @property {String} totpCode \"123456\"\n * @property {String} backupCode \"aaaaa-bbbbb\"\n * @property {Integer} userId\n * @property {String} userUuid\n * @property {String} emailOrUsername\n * @property {String} email\n * @property {String} username\n * @property {String} phoneNumber\n * @property {String|Boolean} redirect - do not redirect if false, or redirect to given path\n */\nexport async function loginWithTotp({\n  totpCode,\n  backupCode,\n  userId,\n  userUuid,\n  emailOrUsername,\n  email,\n  username,\n  phoneNumber,\n  redirect,\n} = {}) {\n  try {\n    if (!totpCode && !backupCode) return;\n\n    const { data } = await post(`/auth/totp`, {\n      totpCode,\n      backupCode,\n      userId,\n      userUuid,\n      emailOrUsername,\n      email,\n      username,\n      phoneNumber,\n      tenantId: store.tenantId,\n    });\n\n    if (data.hasOwnProperty(\"tokens\")) {\n      setCookiesAndTokens(data.tokens);\n      await exchange(data);\n      handleRedirect({ redirect, data });\n      return data;\n    }\n\n    if (data.hasOwnProperty(\"firstFactorCode\")) {\n      return data;\n    }\n\n    throw new Error(\"Problem logging in.\");\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\nexport async function getTotp() {\n  try {\n    if (!store.tokens.accessToken) {\n      throw new Error(`getTotp() was called without a JWT access token.`);\n    }\n\n    const { data } = await get(`/auth/totp`, {\n      headers: {\n        Authorization: `Bearer ${store.tokens.accessToken}`,\n      },\n    });\n\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n","import { get } from \"./api.js\";\nimport { getIframe, postMessageAsPromise } from \"./iframe.js\";\nimport { store } from \"./store.js\";\nimport { removeAllCookies } from \"./cookies.js\";\nimport { setTokensFromCookies } from \"./tokens.js\";\nimport { handleRedirect } from \"./url\";\nimport { throwFormattedError } from \"./utils.js\";\n\n/**\n * Log a user out and redirect to the logout path.\n */\nexport async function logout({ method, redirect } = {}) {\n  if (method === \"saml\") {\n    return completeSamlLogout();\n  }\n  if (!store.tokens.accessToken) {\n    return removeAllCookies();\n  }\n\n  try {\n    const { data } = await get(`/auth/logout`, {\n      headers: {\n        authorization: `Bearer ${store.tokens.accessToken}`,\n      },\n    });\n    removeAllCookies();\n    handleRedirect({ redirect, data });\n  } catch (err) {\n    removeAllCookies();\n  }\n}\n\nasync function completeSamlLogout() {\n  if (!store.tokens.accessToken) {\n    throw new Error(\"Please log in to authorize your logout request.\");\n  }\n\n  try {\n    const { data } = await get(`/auth/saml/idp/token`, {\n      headers: {\n        authorization: `Bearer ${store.tokens.accessToken}`,\n      },\n    });\n\n    window.location.assign(\n      `${store.baseUrl}auth/saml/idp/logout?tenant_id=${store.tenantId}&token=${data.token}&uuid=${store.user.userUuid}`\n    );\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n// TODO re-enable exchange method once new endpoints are stable [06/15/21]\n// --------------------------\n// const iframe = getIframe();\n// if (!iframe) return;\n// try {\n//   const { data } = await postMessageAsPromise({\n//     type: \"logout\",\n//     tenantId: store.tenantId,\n//   });\n//   removeAllCookies();\n//   setTokensFromCookies();\n//   handleRedirect({ redirect, data });\n// } catch (error) {\n//   removeAllCookies();\n//   redirectToPath(\"/\");\n// }\n","export const apiUrl = `https://api.userfront.com/v0/`;\n\nexport const privateIPRegex =\n  /((^127\\.)|(^10\\.)|(^172\\.1[6-9]\\.)|(^172\\.2[0-9]\\.)|(^172\\.3[0-1]\\.)|(^192\\.168\\.))\\d{1,3}\\.\\d{1,3}/g;\n","import { get } from \"./api.js\";\nimport { privateIPRegex } from \"./constants.js\";\nimport { store } from \"./store.js\";\n\n/**\n * Global mode object\n */\nexport const mode = {\n  value: \"live\",\n  reason: undefined,\n  setMode,\n};\n\nsetModeSync();\n\n/**\n * Determine whether a hostname is in test mode.\n * @param {String} hn\n */\nexport function isTestHostname(hn) {\n  try {\n    const hostname = hn || window.location.hostname;\n    return !!(hostname.match(/localhost/g) || hostname.match(privateIPRegex));\n  } catch (err) {\n    return true;\n  }\n}\n\nexport function isHttps() {\n  try {\n    return window.location.protocol === \"https:\";\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Define the mode of operation (live or test)\n */\nexport async function setMode() {\n  try {\n    const { data } = await get(`/tenants/${store.tenantId}/mode`);\n    mode.value = data.mode || \"test\";\n    mode.reason = getReason(mode.value);\n    store.mode = mode.value;\n  } catch (err) {\n    mode.value = \"test\";\n    store.mode = mode.value;\n  }\n}\n\n/**\n * Estimate the mode without making an API call\n */\nexport function setModeSync() {\n  const modeValue = isTestHostname() || !isHttps() ? \"test\" : \"live\";\n  mode.value = modeValue;\n  mode.reason = getReason(modeValue);\n  store.mode = modeValue;\n}\n\n/**\n * Set the reason for the mode\n * - http\n * - domain\n */\nfunction getReason(mode) {\n  try {\n    if (mode === \"live\") {\n      return \"domain\";\n    }\n    if (window.location.protocol === \"http:\") {\n      return \"http\";\n    } else if (window.location.protocol !== \"https:\") {\n      return \"protocol\";\n    } else {\n      return \"domain\";\n    }\n  } catch (error) {}\n}\n","/**\n * user methods are refactored into a separate file to avoid a circular dependency\n * between Userfront.refresh() [which requires setUser()]\n * and Userfront.user.update() [which requires refresh()].\n */\nimport { put } from \"./api.js\";\nimport { store } from \"./store.js\";\nimport { refresh } from \"./refresh.js\";\nimport { getTotp } from \"./totp.js\";\nimport { getJWTPayload } from \"./utils.js\";\nimport { updatePassword } from \"./password.js\";\n\n/**\n * Update the user record on Userfront\n * @param {Object} payload User properties to update e.g. { name: 'John Doe' }\n */\nexport async function update(payload) {\n  if (!payload || Object.keys(payload).length < 1) {\n    return console.warn(\"Missing user properties to update\");\n  }\n\n  // Make request to update the user\n  await put(`/self`, payload, {\n    headers: {\n      authorization: `Bearer ${store.tokens.accessToken}`,\n    },\n  });\n\n  // Refresh the access and ID tokens, and set the store.user object from the ID token\n  await refresh();\n\n  return store.user;\n}\n\n/**\n * Determine whether the access token has a given role\n * @param {String} roleName\n * @param {Object} options\n * @returns {Boolean}\n */\nexport function hasRole(roleName, { tenantId } = {}) {\n  try {\n    if (!store.tokens.accessToken || !store.tenantId) {\n      return false;\n    }\n    const { authorization } = getJWTPayload(store.tokens.accessToken);\n    if (!authorization) {\n      return false;\n    }\n    tenantId = tenantId || store.tenantId;\n    if (!authorization[tenantId] || !authorization[tenantId].roles) {\n      return false;\n    }\n    return authorization[tenantId].roles.indexOf(roleName) > -1;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Add the methods to the store.user object\n */\nstore.user.update = update;\nstore.user.hasRole = hasRole;\nstore.user.updatePassword = updatePassword;\nstore.user.getTotp = getTotp;\n","import axios from \"axios\";\nimport { store } from \"./store.js\";\nimport {\n  tokens,\n  accessToken,\n  idToken,\n  setTokensFromCookies,\n  setTokenNames,\n} from \"./tokens\";\nimport { redirectIfLoggedIn } from \"./url.js\";\nimport { sendSms } from \"./mfa.js\";\nimport { signup } from \"./signup.js\";\nimport { login } from \"./login.js\";\nimport { updatePassword, resetPassword, sendResetLink } from \"./password.js\";\nimport { sendLoginLink } from \"./link.js\";\nimport { sendVerificationCode } from \"./verificationCode\";\nimport { logout } from \"./logout.js\";\nimport { mode, setMode, setModeSync } from \"./mode.js\";\n// import { setIframe } from \"./iframe.js\";\nimport { user } from \"./user.js\";\nimport \"./user.methods.js\";\nimport { refresh } from \"./refresh.js\";\nimport { apiUrl } from \"./constants.js\";\n\nlet initCallbacks = [];\n\n/**\n * Initialize the Userfront library.\n * @param {String} tenantId\n */\nfunction init(tenantId, opts = {}) {\n  if (!tenantId) return console.warn(\"Userfront initialized without tenantId\");\n\n  store.tenantId = tenantId;\n\n  store.baseUrl = opts.baseUrl || apiUrl;\n  if (!store.baseUrl.endsWith(\"/\")) {\n    store.baseUrl += \"/\";\n  }\n\n  if (opts.domain) {\n    store.domain = opts.domain;\n    const url = `https://${store.domain}`;\n    axios.defaults.headers.common[\"x-application-id\"] = url;\n    axios.defaults.headers.common[\"x-origin\"] = url;\n  }\n\n  setTokenNames();\n  // setIframe(); // TODO re-enable when iframe is needed\n  setTokensFromCookies();\n  setModeSync();\n\n  try {\n    if (initCallbacks.length > 0) {\n      initCallbacks.forEach((cb) => {\n        if (!cb || typeof cb !== \"function\") return;\n        cb({ tenantId });\n      });\n    }\n    initCallbacks = [];\n  } catch (error) {}\n}\n\n/**\n * Add a callback function to be called upon Userfront.init()\n * @param {Function} cb\n */\nfunction addInitCallback(cb) {\n  if (!cb || typeof cb !== \"function\") return;\n  initCallbacks.push(cb);\n}\n\n/**\n\n * Register a window-level event called \"urlchanged\" that will fire\n * whenever the browser URL changes.\n */\nlet isRegistered = false;\nfunction registerUrlChangedEventListener() {\n  if (isRegistered) return;\n  isRegistered = true;\n  try {\n    history.pushState = ((f) =>\n      function pushState() {\n        var ret = f.apply(this, arguments);\n        window.dispatchEvent(new Event(\"pushstate\"));\n        window.dispatchEvent(new Event(\"urlchanged\"));\n        return ret;\n      })(history.pushState);\n\n    history.replaceState = ((f) =>\n      function replaceState() {\n        var ret = f.apply(this, arguments);\n        window.dispatchEvent(new Event(\"replacestate\"));\n        window.dispatchEvent(new Event(\"urlchanged\"));\n        return ret;\n      })(history.replaceState);\n\n    window.addEventListener(\"popstate\", () => {\n      window.dispatchEvent(new Event(\"urlchanged\"));\n    });\n  } catch (error) {}\n}\n\n/**\n * EXPORTS\n */\n\nexport default {\n  // index\n  addInitCallback,\n  init,\n  registerUrlChangedEventListener,\n\n  //logout\n  logout,\n\n  // mode\n  mode,\n  setMode,\n\n  // refresh\n  refresh: (a, b, c) => {\n    try {\n      console.warn(\n        \"Userfront.refresh() is deprecated and will be removed. Please use Userfront.tokens.refresh() instead.\"\n      );\n    } catch (error) {}\n    return refresh(a, b, c);\n  },\n\n  // signon\n  login,\n  resetPassword,\n  updatePassword,\n  sendLoginLink,\n  sendResetLink,\n  sendVerificationCode,\n  signup,\n\n  // store\n  store,\n\n  // tokens\n  tokens,\n  accessToken,\n  idToken,\n\n  // url\n  redirectIfLoggedIn,\n\n  // user\n  user,\n\n  // mfa\n  sendSms,\n\n  // utils\n};\n","import { loginWithPassword } from \"./password.js\";\nimport { loginWithLink, sendPasswordlessLink } from \"./link.js\";\nimport { signonWithSso } from \"./sso.js\";\nimport { loginWithTotp } from \"./totp.js\";\nimport { loginWithVerificationCode } from \"./verificationCode.js\";\nimport { completeSamlLogin } from \"./saml.js\";\n\n/**\n * Log a user in via the provided method. This method serves to call other\n * methods, depending on the \"method\" parameter passed in.\n * @param {String} method\n * @param {Number} userId\n * @param {String} userUuid\n * @param {String} email\n * @param {String} username\n * @param {String} emailOrUsername\n * @param {String} phoneNumber\n * @param {String} password\n * @param {String} token\n * @param {String} uuid\n * @param {String} totpCode\n * @param {String} backupCode\n * @param {String} channel \"sms\" or \"email\"\n * @param {String} verificationCode\n * @param {String} redirect - do not redirect if false, or redirect to given path\n */\nexport async function login({\n  method,\n  // User identifiers\n  userId,\n  userUuid,\n  email,\n  username,\n  emailOrUsername,\n  phoneNumber,\n  // Password\n  password,\n  // Link\n  token,\n  uuid,\n  // Totp\n  totpCode,\n  backupCode,\n  // Verification code\n  channel,\n  verificationCode,\n  // Other\n  redirect,\n} = {}) {\n  if (!method) {\n    throw new Error('Userfront.login called without \"method\" property.');\n  }\n  switch (method) {\n    case \"apple\":\n    case \"azure\":\n    case \"facebook\":\n    case \"github\":\n    case \"google\":\n    case \"linkedin\":\n      return signonWithSso({ provider: method, redirect });\n    case \"password\":\n      return loginWithPassword({\n        email,\n        username,\n        emailOrUsername,\n        password,\n        redirect,\n      });\n    case \"passwordless\":\n      return sendPasswordlessLink({ email });\n    case \"link\":\n      return loginWithLink({ token, uuid, redirect });\n    case \"totp\":\n      return loginWithTotp({\n        totpCode,\n        backupCode,\n        userId,\n        userUuid,\n        emailOrUsername,\n        email,\n        username,\n        phoneNumber,\n        redirect,\n      });\n    case \"verificationCode\":\n      return loginWithVerificationCode({\n        channel,\n        email,\n        phoneNumber,\n        verificationCode,\n        redirect,\n      });\n    case \"saml\":\n      return completeSamlLogin();\n    default:\n      throw new Error('Userfront.login called with invalid \"method\" property.');\n  }\n}\n","import { get } from \"./api.js\";\nimport { store } from \"./store.js\";\nimport { throwFormattedError } from \"./utils.js\";\n\nexport async function completeSamlLogin() {\n  try {\n    if (!store.tokens.accessToken) {\n      return console.warn(\"Cannot complete SAML login without access token\");\n    }\n\n    const { data } = await get(`/auth/saml/idp/token`, {\n      headers: {\n        authorization: `Bearer ${store.tokens.accessToken}`,\n      },\n    });\n\n    window.location.assign(\n      `${store.baseUrl}auth/saml/idp/login?tenant_id=${store.tenantId}&token=${data.token}&uuid=${store.user.userUuid}`\n    );\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n","import { signupWithPassword } from \"./password.js\";\nimport { signonWithSso } from \"./sso.js\";\nimport { sendPasswordlessLink } from \"./link.js\";\nimport { sendVerificationCode } from \"./verificationCode.js\";\n\n/**\n * Register a user via the provided method. This method serves to call other\n * methods, depending on the \"method\" parameter passed in.\n * @param {String} method\n * @param {String} email\n * @param {String} username\n * @param {String} phoneNumber\n * @param {String} name\n * @param {Object} data - Object for custom user fields\n * @param {String} password\n * @param {String} channel \"sms\" or \"email\"\n * @param {String} redirect - do not redirect if false, or redirect to given path\n */\nexport async function signup({\n  method,\n  email,\n  username,\n  phoneNumber,\n  name,\n  data,\n  password,\n  channel,\n  redirect,\n} = {}) {\n  if (!method) {\n    throw new Error('Userfront.signup called without \"method\" property.');\n  }\n  switch (method) {\n    case \"apple\":\n    case \"azure\":\n    case \"facebook\":\n    case \"github\":\n    case \"google\":\n    case \"linkedin\":\n      return signonWithSso({ provider: method, redirect });\n    case \"password\":\n      return signupWithPassword({\n        username,\n        name,\n        email,\n        password,\n        userData: data,\n        redirect,\n      });\n    case \"passwordless\":\n      return sendPasswordlessLink({ email, name, username, userData: data });\n    case \"verificationCode\":\n      return sendVerificationCode({\n        channel,\n        email,\n        phoneNumber,\n        name,\n        username,\n        data,\n      });\n    default:\n      throw new Error(\n        'Userfront.signup called with invalid \"method\" property.'\n      );\n  }\n}\n","import { setCookiesAndTokens } from \"./cookies.js\";\nimport { store } from \"./store.js\";\nimport { handleRedirect } from \"./url.js\";\nimport { exchange } from \"./refresh.js\";\nimport { throwFormattedError } from \"./utils.js\";\nimport { post, put } from \"./api.js\";\n\n/**\n * Send an SMS to a phone number\n * @param {String} type Type of SMS to send\n * @param {String} phoneNumber Phone number in E.164 format\n * @param {String} firstFactorCode Identifier obtained from login() response\n * @returns {Object}\n */\nexport async function sendSms({ type, phoneNumber, firstFactorCode } = {}) {\n  if (!type) {\n    throw new Error('Userfront.sendSms called without \"type\" property.');\n  }\n\n  switch (type) {\n    case \"verificationCode\":\n      if (!phoneNumber || !firstFactorCode) {\n        throw new Error(\n          'Userfront.sendSms type \"verificationCode\" requires \"phoneNumber\" and \"firstFactorCode\".'\n        );\n      }\n\n      return sendMfaCode({\n        firstFactorCode,\n        phoneNumber,\n        strategy: \"verificationCode\",\n        channel: \"sms\",\n      });\n    default:\n      throw new Error('Userfront.sendSms called with invalid \"type\" property.');\n  }\n}\n\n/**\n * Send an MFA verification code\n * @param {String} firstFactorCode Identifier obtained from login() response\n * @param {String} strategy Type of MFA strategy\n * @param {String} channel Method of sending the verification code\n * @param {String} phoneNumber Phone number in E.164 format\n * @returns {Object}\n */\nexport async function sendMfaCode({\n  firstFactorCode,\n  strategy,\n  channel,\n  phoneNumber,\n} = {}) {\n  if (!firstFactorCode || !strategy || !channel || !phoneNumber) {\n    throw new Error(\"Userfront.sendMfaCode missing parameters.\");\n  }\n\n  try {\n    const { data } = await post(`/auth/mfa`, {\n      tenantId: store.tenantId,\n      firstFactorCode,\n      strategy,\n      channel,\n      phoneNumber,\n    });\n\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Log in using firstFactorCode and MFA verification code\n * @param {String} firstFactorCode Identifier obtained from login() response\n * @param {String} verificationCode Code provided by the user\n * @param {String|Boolean} redirect Redirect to given path unless specified as `false`\n * @returns {Object}\n */\nexport async function loginWithMfa({\n  firstFactorCode,\n  verificationCode,\n  redirect,\n} = {}) {\n  if (!firstFactorCode || !verificationCode) {\n    throw new Error(\"Userfront.loginWithMfa missing parameters.\");\n  }\n\n  try {\n    const { data } = await put(`/auth/mfa`, {\n      tenantId: store.tenantId,\n      firstFactorCode,\n      verificationCode,\n    });\n\n    setCookiesAndTokens(data.tokens);\n    await exchange(data);\n    handleRedirect({ redirect, data });\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n"],"names":["store","user","tokens","mode","getJWTPayload","token","encodedPayload","split","replace","JSON","parse","atob","error","console","throwFormattedError","Error","response","_error$response","data","_error$response$data","message","reduceSlashes","str","put","path","payload","options","url","baseUrl","axios","post","get","setCookie","value","type","cookieName","tenantId","secure","sameSite","Cookies","set","removeCookie","name","paths","domains","window","location","pathname","hostname","primaryDomain","slice","join","undefined","err","map","domain","remove","removeAllCookies","accessTokenName","idTokenName","refreshTokenName","accessToken","idToken","refreshToken","attr","unsetUser","setCookiesAndTokens","access","cookieOptions","id","refresh","setTokensFromCookies","body","recover","result","e","then","exchange","headers","authorization","status","basicRefresh","warn","tokenName","idTokenPayload","propsToDefine","prop","setUser","getQueryAttr","attrName","href","indexOf","decodeURIComponent","handleRedirect","redirect","redirectToPath","redirectTo","pathOrUrl","document","el","createElement","assign","hash","search","updatePasswordWithJwt","password","existingPassword","Authorization","updatePasswordWithLink","uuid","updatePassword","method","resetPassword","signonWithSso","provider","origin","encodeURIComponent","getProviderLink","sendPasswordlessLink","email","username","userData","enforceChannel","channel","phoneNumber","sendVerificationCode","res","_catch","privateIPRegex","setMode","reason","getReason","setModeSync","modeValue","hn","match","isTestHostname","protocol","isHttps","update","Object","keys","length","hasRole","roleName","roles","getTotp","initCallbacks","isRegistered","addInitCallback","cb","push","init","opts","endsWith","defaults","common","forEach","registerUrlChangedEventListener","history","pushState","f","ret","apply","this","arguments","dispatchEvent","Event","replaceState","addEventListener","logout","userUuid","completeSamlLogout","a","b","c","login","userId","emailOrUsername","totpCode","backupCode","verificationCode","hasOwnProperty","_exit","loginWithPassword","loginWithLink","loginWithTotp","loginWithVerificationCode","completeSamlLogin","sendLoginLink","sendResetLink","signup","signupWithPassword","redirectIfLoggedIn","tenant","loginRedirectPath","sendSms","firstFactorCode","strategy","sendMfaCode"],"mappings":"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"}