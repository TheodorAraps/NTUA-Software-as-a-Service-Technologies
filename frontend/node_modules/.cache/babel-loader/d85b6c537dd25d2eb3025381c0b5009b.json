{"ast":null,"code":"var _jsxFileName = \"/home/theo/saas/frontend/src/components/highchart.js\";\nimport React, { Component } from 'react';\nimport HighchartsReact from 'highcharts-react-official';\nimport Highcharts from 'highcharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet values = [],\n    i = -19;\n\nclass Highchart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setHoverData = e => {\n      // The chart is not updated because `chartOptions` has not changed.\n      this.setState({\n        hoverData: e.target.category\n      });\n    };\n\n    this.state = {\n      // To avoid unnecessary update keep all options in the state.\n      chartOptions: {\n        chart: {\n          animation: Highcharts.svg,\n          // don't animate in old IE\n          marginRight: 10\n        },\n        title: {\n          text: 'Actual Total Load'\n        },\n        xAxis: {\n          type: 'datetime',\n          tickPixelInterval: 150\n        },\n        yAxis: {\n          title: {\n            text: 'Value'\n          },\n          plotLines: [{\n            value: 0,\n            width: 1,\n            color: '#808080'\n          }]\n        },\n        tooltip: {\n          formatter: function () {\n            return '<b>' + this.series.name + '</b><br/>' + Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) + '<br/>' + Highcharts.numberFormat(this.y, 2);\n          }\n        },\n        legend: {\n          enabled: false\n        },\n        exporting: {\n          enabled: false\n        },\n        series: [{\n          data: values\n        }],\n        plotOptions: {\n          series: {\n            point: {\n              events: {\n                mouseOver: this.setHoverData.bind(this)\n              }\n            }\n          }\n        }\n      },\n      hoverData: null\n    };\n  }\n\n  render() {\n    const {\n      chartOptions,\n      hoverData\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(HighchartsReact, {\n        highcharts: Highcharts,\n        options: chartOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Hovering over \", hoverData]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.updateSeries.bind(this),\n        children: \"Update Series\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this);\n  }\n\n} // class Highchart extends Component {\n//     componentDidMount() {\n//     let chart = this.chart.getChart();\n//     //chart.series[0].addPoint({x: 10, y: 12});\n//     // set up the updating of the chart each second\n//     var series = chart.series[0];\n//     setInterval(function () {\n//         var x = (new Date()).getTime(), // current time\n//         y = Math.random();\n//         series.addPoint([x, y], true, true);\n//     }, 1000);\n//     }\n//     static formatTooltip(tooltip, x = this.x, y = this.y, series = this.series) {\n//     return `<b>${x}</b><br/>${series.name}: ${y}`;\n//     }\n//     static getConfig = (navs) => ({\n//     chart: {\n//         type: 'spline',\n//         animation: Highcharts.svg, // don't animate in old IE\n//         marginRight: 10,\n//     },\n//     title: {\n//         text: 'Live random data'\n//     },\n//     xAxis: {\n//         type: 'datetime',\n//         tickPixelInterval: 150\n//     },\n//     yAxis: {\n//         title: {\n//         text: 'Value'\n//         },\n//         plotLines: [{\n//         value: 0,\n//         width: 1,\n//         color: '#808080'\n//         }]\n//     },\n//     tooltip: {\n//         formatter: function () {\n//         return '<b>' + this.series.name + '</b><br/>' +\n//             Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) + '<br/>' +\n//             Highcharts.numberFormat(this.y, 2);\n//         }\n//     },\n//     legend: {\n//         enabled: false\n//     },\n//     exporting: {\n//         enabled: false\n//     },\n//     series: [{\n//         name: 'Random data',\n//         data: (function () {\n//         // generate an array of random data\n//         var data = [],\n//             time = (new Date()).getTime(),\n//             i;\n//         for (i = -19; i <= 0; i += 1) {\n//             data.push({\n//             x: time + i * 1000,\n//             y: Math.random()\n//             });\n//         }\n//         return data;\n//         }())\n//     }]\n//     })\n//     render() {\n//     return (\n//         <div>\n//         <HighchartsReact config={Highchart.getConfig(this.props.navs)} ref=\"chart\" />\n//         </div>\n//     );\n//     }\n// }\n\n\nHighchart.updateSeries = backendData => {\n  // The chart is updated only with new options.\n  var time = new Date().getTime();\n\n  for (let i in backendData) {\n    let xChart = backendData[i].DateTime;\n    let yChart = backendData[i].TotalLoadValue;\n    values.push([xChart, yChart]);\n  } //values.push([time + i * 1000, Math.random() * 15]);\n\n\n  i++;\n  Highchart.setState({\n    chartOptions: {\n      series: [{\n        data: values\n      }]\n    }\n  });\n};\n\nexport default Highchart;","map":{"version":3,"names":["React","Component","HighchartsReact","Highcharts","values","i","Highchart","constructor","props","setHoverData","e","setState","hoverData","target","category","state","chartOptions","chart","animation","svg","marginRight","title","text","xAxis","type","tickPixelInterval","yAxis","plotLines","value","width","color","tooltip","formatter","series","name","dateFormat","x","numberFormat","y","legend","enabled","exporting","data","plotOptions","point","events","mouseOver","bind","render","updateSeries","backendData","time","Date","getTime","xChart","DateTime","yChart","TotalLoadValue","push"],"sources":["/home/theo/saas/frontend/src/components/highchart.js"],"sourcesContent":["\r\nimport React, { Component } from 'react';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport Highcharts from 'highcharts';\r\n\r\nlet values = [], i = -19;\r\n\r\nclass Highchart extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        \r\n\r\n        this.state = {\r\n            // To avoid unnecessary update keep all options in the state.\r\n            chartOptions: {\r\n                chart: {\r\n                    animation: Highcharts.svg, // don't animate in old IE\r\n                    marginRight: 10,\r\n                    },\r\n                title: {\r\n                    text: 'Actual Total Load'\r\n                    },\r\n                xAxis: {\r\n                    type: 'datetime',\r\n                    tickPixelInterval: 150\r\n                    },\r\n                yAxis: {\r\n                    title: {\r\n                        text: 'Value'\r\n                    },\r\n                plotLines: [{\r\n                        value: 0,\r\n                        width: 1,\r\n                        color: '#808080'\r\n                    }]\r\n                    },\r\n                tooltip: {\r\n                    formatter: function () {\r\n                        return '<b>' + this.series.name + '</b><br/>' +\r\n                        Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) + '<br/>' +\r\n                        Highcharts.numberFormat(this.y, 2);\r\n                    }\r\n                    },\r\n                legend: {\r\n                        enabled: false\r\n                    },\r\n                    exporting: {\r\n                        enabled: false\r\n                    },\r\n                series: [\r\n                    { data: values }\r\n                ],\r\n                plotOptions: {\r\n                    series: {\r\n                    point: {\r\n                        events: {\r\n                        mouseOver: this.setHoverData.bind(this)\r\n                        }\r\n                    }\r\n                    }\r\n                }\r\n            },\r\n            hoverData: null\r\n        };\r\n    }\r\n\r\n    setHoverData = (e) => { \r\n        // The chart is not updated because `chartOptions` has not changed.\r\n        this.setState({ hoverData: e.target.category })\r\n    }\r\n\r\n    static updateSeries = (backendData) => {\r\n        // The chart is updated only with new options.\r\n        var time = new Date().getTime()\r\n        for(let i in backendData) {\r\n            let xChart = backendData[i].DateTime;\r\n            let yChart = backendData[i].TotalLoadValue;\r\n            values.push([xChart, yChart]);\r\n        }\r\n        //values.push([time + i * 1000, Math.random() * 15]);\r\n        i++;\r\n        this.setState({ \r\n            chartOptions: {\r\n            series: [\r\n                { data: values }\r\n            ]\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { chartOptions, hoverData } = this.state;\r\n\r\n        return (\r\n            <div>\r\n            <HighchartsReact\r\n                highcharts={Highcharts}\r\n                options={chartOptions}\r\n            />\r\n            <h3>Hovering over {hoverData}</h3>\r\n            <button onClick={this.updateSeries.bind(this)}>Update Series</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// class Highchart extends Component {\r\n//     componentDidMount() {\r\n//     let chart = this.chart.getChart();\r\n//     //chart.series[0].addPoint({x: 10, y: 12});\r\n\r\n//     // set up the updating of the chart each second\r\n//     var series = chart.series[0];\r\n//     setInterval(function () {\r\n//         var x = (new Date()).getTime(), // current time\r\n//         y = Math.random();\r\n//         series.addPoint([x, y], true, true);\r\n//     }, 1000);\r\n\r\n//     }\r\n//     static formatTooltip(tooltip, x = this.x, y = this.y, series = this.series) {\r\n//     return `<b>${x}</b><br/>${series.name}: ${y}`;\r\n//     }\r\n\r\n//     static getConfig = (navs) => ({\r\n//     chart: {\r\n//         type: 'spline',\r\n//         animation: Highcharts.svg, // don't animate in old IE\r\n//         marginRight: 10,\r\n//     },\r\n//     title: {\r\n//         text: 'Live random data'\r\n//     },\r\n//     xAxis: {\r\n//         type: 'datetime',\r\n//         tickPixelInterval: 150\r\n//     },\r\n//     yAxis: {\r\n//         title: {\r\n//         text: 'Value'\r\n//         },\r\n//         plotLines: [{\r\n//         value: 0,\r\n//         width: 1,\r\n//         color: '#808080'\r\n//         }]\r\n//     },\r\n//     tooltip: {\r\n//         formatter: function () {\r\n//         return '<b>' + this.series.name + '</b><br/>' +\r\n//             Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) + '<br/>' +\r\n//             Highcharts.numberFormat(this.y, 2);\r\n//         }\r\n//     },\r\n//     legend: {\r\n//         enabled: false\r\n//     },\r\n//     exporting: {\r\n//         enabled: false\r\n//     },\r\n//     series: [{\r\n//         name: 'Random data',\r\n//         data: (function () {\r\n//         // generate an array of random data\r\n//         var data = [],\r\n//             time = (new Date()).getTime(),\r\n//             i;\r\n\r\n//         for (i = -19; i <= 0; i += 1) {\r\n//             data.push({\r\n//             x: time + i * 1000,\r\n//             y: Math.random()\r\n//             });\r\n//         }\r\n//         return data;\r\n//         }())\r\n//     }]\r\n//     })\r\n\r\n//     render() {\r\n//     return (\r\n//         <div>\r\n//         <HighchartsReact config={Highchart.getConfig(this.props.navs)} ref=\"chart\" />\r\n//         </div>\r\n//     );\r\n//     }\r\n\r\n// }\r\n\r\nexport default Highchart;"],"mappings":"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"},"metadata":{},"sourceType":"module"}