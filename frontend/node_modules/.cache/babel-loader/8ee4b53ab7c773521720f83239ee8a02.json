{"ast":null,"code":"/*\n Highcharts JS v10.2.0 (2022-07-05)\n\n Exporting module\n\n (c) 2010-2021 Torstein Honsi\n\n License: www.highcharts.com/license\n*/\n(function (a) {\n  \"object\" === typeof module && module.exports ? (a[\"default\"] = a, module.exports = a) : \"function\" === typeof define && define.amd ? define(\"highcharts/modules/exporting\", [\"highcharts\"], function (g) {\n    a(g);\n    a.Highcharts = g;\n    return a;\n  }) : a(\"undefined\" !== typeof Highcharts ? Highcharts : void 0);\n})(function (a) {\n  function g(a, e, t, n) {\n    a.hasOwnProperty(e) || (a[e] = n.apply(null, t), \"function\" === typeof CustomEvent && window.dispatchEvent(new CustomEvent(\"HighchartsModuleLoaded\", {\n      detail: {\n        path: e,\n        module: a[e]\n      }\n    })));\n  }\n\n  a = a ? a._modules : {};\n  g(a, \"Extensions/FullScreen.js\", [a[\"Core/Chart/Chart.js\"], a[\"Core/Globals.js\"], a[\"Core/Renderer/HTML/AST.js\"], a[\"Core/Utilities.js\"]], function (a, e, t, n) {\n    var l = n.addEvent,\n        k = n.fireEvent;\n\n    n = function () {\n      function a(b) {\n        this.chart = b;\n        this.isOpen = !1;\n        b = b.renderTo;\n        this.browserProps || (\"function\" === typeof b.requestFullscreen ? this.browserProps = {\n          fullscreenChange: \"fullscreenchange\",\n          requestFullscreen: \"requestFullscreen\",\n          exitFullscreen: \"exitFullscreen\"\n        } : b.mozRequestFullScreen ? this.browserProps = {\n          fullscreenChange: \"mozfullscreenchange\",\n          requestFullscreen: \"mozRequestFullScreen\",\n          exitFullscreen: \"mozCancelFullScreen\"\n        } : b.webkitRequestFullScreen ? this.browserProps = {\n          fullscreenChange: \"webkitfullscreenchange\",\n          requestFullscreen: \"webkitRequestFullScreen\",\n          exitFullscreen: \"webkitExitFullscreen\"\n        } : b.msRequestFullscreen && (this.browserProps = {\n          fullscreenChange: \"MSFullscreenChange\",\n          requestFullscreen: \"msRequestFullscreen\",\n          exitFullscreen: \"msExitFullscreen\"\n        }));\n      }\n\n      a.prototype.close = function () {\n        var b = this,\n            c = b.chart,\n            a = c.options.chart;\n        k(c, \"fullscreenClose\", null, function () {\n          if (b.isOpen && b.browserProps && c.container.ownerDocument instanceof Document) c.container.ownerDocument[b.browserProps.exitFullscreen]();\n          b.unbindFullscreenEvent && (b.unbindFullscreenEvent = b.unbindFullscreenEvent());\n          c.setSize(b.origWidth, b.origHeight, !1);\n          b.origWidth = void 0;\n          b.origHeight = void 0;\n          a.width = b.origWidthOption;\n          a.height = b.origHeightOption;\n          b.origWidthOption = void 0;\n          b.origHeightOption = void 0;\n          b.isOpen = !1;\n          b.setButtonText();\n        });\n      };\n\n      a.prototype.open = function () {\n        var b = this,\n            c = b.chart,\n            a = c.options.chart;\n        k(c, \"fullscreenOpen\", null, function () {\n          a && (b.origWidthOption = a.width, b.origHeightOption = a.height);\n          b.origWidth = c.chartWidth;\n          b.origHeight = c.chartHeight;\n\n          if (b.browserProps) {\n            var k = l(c.container.ownerDocument, b.browserProps.fullscreenChange, function () {\n              b.isOpen ? (b.isOpen = !1, b.close()) : (c.setSize(null, null, !1), b.isOpen = !0, b.setButtonText());\n            }),\n                e = l(c, \"destroy\", k);\n\n            b.unbindFullscreenEvent = function () {\n              k();\n              e();\n            };\n\n            var p = c.renderTo[b.browserProps.requestFullscreen]();\n            if (p) p[\"catch\"](function () {\n              alert(\"Full screen is not supported inside a frame.\");\n            });\n          }\n        });\n      };\n\n      a.prototype.setButtonText = function () {\n        var b = this.chart,\n            c = b.exportDivElements,\n            a = b.options.exporting,\n            k = a && a.buttons && a.buttons.contextButton.menuItems;\n        b = b.options.lang;\n        a && a.menuItemDefinitions && b && b.exitFullscreen && b.viewFullscreen && k && c && (c = c[k.indexOf(\"viewFullscreen\")]) && t.setElementHTML(c, this.isOpen ? b.exitFullscreen : a.menuItemDefinitions.viewFullscreen.text || b.viewFullscreen);\n      };\n\n      a.prototype.toggle = function () {\n        this.isOpen ? this.close() : this.open();\n      };\n\n      return a;\n    }();\n\n    e.Fullscreen = n;\n    l(a, \"beforeRender\", function () {\n      this.fullscreen = new e.Fullscreen(this);\n    });\n    \"\";\n    return e.Fullscreen;\n  });\n  g(a, \"Core/Chart/ChartNavigationComposition.js\", [], function () {\n    var a;\n\n    (function (a) {\n      a.compose = function (a) {\n        a.navigation || (a.navigation = new e(a));\n        return a;\n      };\n\n      var e = function () {\n        function a(a) {\n          this.updates = [];\n          this.chart = a;\n        }\n\n        a.prototype.addUpdate = function (a) {\n          this.chart.navigation.updates.push(a);\n        };\n\n        a.prototype.update = function (a, k) {\n          var e = this;\n          this.updates.forEach(function (b) {\n            b.call(e.chart, a, k);\n          });\n        };\n\n        return a;\n      }();\n\n      a.Additions = e;\n    })(a || (a = {}));\n\n    return a;\n  });\n  g(a, \"Extensions/Exporting/ExportingDefaults.js\", [a[\"Core/Globals.js\"]], function (a) {\n    a = a.isTouchDevice;\n    return {\n      exporting: {\n        type: \"image/png\",\n        url: \"https://export.highcharts.com/\",\n        pdfFont: {\n          normal: void 0,\n          bold: void 0,\n          bolditalic: void 0,\n          italic: void 0\n        },\n        printMaxWidth: 780,\n        scale: 2,\n        buttons: {\n          contextButton: {\n            className: \"highcharts-contextbutton\",\n            menuClassName: \"highcharts-contextmenu\",\n            symbol: \"menu\",\n            titleKey: \"contextButtonTitle\",\n            menuItems: \"viewFullscreen printChart separator downloadPNG downloadJPEG downloadPDF downloadSVG\".split(\" \")\n          }\n        },\n        menuItemDefinitions: {\n          viewFullscreen: {\n            textKey: \"viewFullscreen\",\n            onclick: function () {\n              this.fullscreen.toggle();\n            }\n          },\n          printChart: {\n            textKey: \"printChart\",\n            onclick: function () {\n              this.print();\n            }\n          },\n          separator: {\n            separator: !0\n          },\n          downloadPNG: {\n            textKey: \"downloadPNG\",\n            onclick: function () {\n              this.exportChart();\n            }\n          },\n          downloadJPEG: {\n            textKey: \"downloadJPEG\",\n            onclick: function () {\n              this.exportChart({\n                type: \"image/jpeg\"\n              });\n            }\n          },\n          downloadPDF: {\n            textKey: \"downloadPDF\",\n            onclick: function () {\n              this.exportChart({\n                type: \"application/pdf\"\n              });\n            }\n          },\n          downloadSVG: {\n            textKey: \"downloadSVG\",\n            onclick: function () {\n              this.exportChart({\n                type: \"image/svg+xml\"\n              });\n            }\n          }\n        }\n      },\n      lang: {\n        viewFullscreen: \"View in full screen\",\n        exitFullscreen: \"Exit from full screen\",\n        printChart: \"Print chart\",\n        downloadPNG: \"Download PNG image\",\n        downloadJPEG: \"Download JPEG image\",\n        downloadPDF: \"Download PDF document\",\n        downloadSVG: \"Download SVG vector image\",\n        contextButtonTitle: \"Chart context menu\"\n      },\n      navigation: {\n        buttonOptions: {\n          symbolSize: 14,\n          symbolX: 12.5,\n          symbolY: 10.5,\n          align: \"right\",\n          buttonSpacing: 3,\n          height: 22,\n          verticalAlign: \"top\",\n          width: 24,\n          symbolFill: \"#666666\",\n          symbolStroke: \"#666666\",\n          symbolStrokeWidth: 3,\n          theme: {\n            padding: 5\n          }\n        },\n        menuStyle: {\n          border: \"1px solid \".concat(\"#999999\"),\n          background: \"#ffffff\",\n          padding: \"5px 0\"\n        },\n        menuItemStyle: {\n          padding: \"0.5em 1em\",\n          color: \"#333333\",\n          background: \"none\",\n          fontSize: a ? \"14px\" : \"11px\",\n          transition: \"background 250ms, color 250ms\"\n        },\n        menuItemHoverStyle: {\n          background: \"#335cad\",\n          color: \"#ffffff\"\n        }\n      }\n    };\n  });\n  g(a, \"Extensions/Exporting/ExportingSymbols.js\", [], function () {\n    var a;\n\n    (function (a) {\n      function e(a, e, b, c) {\n        return [[\"M\", a, e + 2.5], [\"L\", a + b, e + 2.5], [\"M\", a, e + c / 2 + .5], [\"L\", a + b, e + c / 2 + .5], [\"M\", a, e + c - 1.5], [\"L\", a + b, e + c - 1.5]];\n      }\n\n      function l(a, e, b, c) {\n        a = c / 3 - 2;\n        c = [];\n        return c = c.concat(this.circle(b - a, e, a, a), this.circle(b - a, e + a + 4, a, a), this.circle(b - a, e + 2 * (a + 4), a, a));\n      }\n\n      var g = [];\n\n      a.compose = function (a) {\n        -1 === g.indexOf(a) && (g.push(a), a = a.prototype.symbols, a.menu = e, a.menuball = l.bind(a));\n      };\n    })(a || (a = {}));\n\n    return a;\n  });\n  g(a, \"Core/HttpUtilities.js\", [a[\"Core/Globals.js\"], a[\"Core/Utilities.js\"]], function (a, e) {\n    var l = a.doc,\n        g = e.createElement,\n        z = e.discardElement,\n        k = e.merge,\n        p = e.objectEach,\n        b = {\n      ajax: function (a) {\n        var b = {\n          json: \"application/json\",\n          xml: \"application/xml\",\n          text: \"text/plain\",\n          octet: \"application/octet-stream\"\n        },\n            c = new XMLHttpRequest();\n        if (!a.url) return !1;\n        c.open((a.type || \"get\").toUpperCase(), a.url, !0);\n        a.headers && a.headers[\"Content-Type\"] || c.setRequestHeader(\"Content-Type\", b[a.dataType || \"json\"] || b.text);\n        p(a.headers, function (a, b) {\n          c.setRequestHeader(b, a);\n        });\n        a.responseType && (c.responseType = a.responseType);\n\n        c.onreadystatechange = function () {\n          if (4 === c.readyState) {\n            if (200 === c.status) {\n              if (\"blob\" !== a.responseType) {\n                var b = c.responseText;\n                if (\"json\" === a.dataType) try {\n                  b = JSON.parse(b);\n                } catch (x) {\n                  if (x instanceof Error) {\n                    a.error && a.error(c, x);\n                    return;\n                  }\n                }\n              }\n\n              return a.success && a.success(b, c);\n            }\n\n            a.error && a.error(c, c.responseText);\n          }\n        };\n\n        a.data && \"string\" !== typeof a.data && (a.data = JSON.stringify(a.data));\n        c.send(a.data);\n      },\n      getJSON: function (a, e) {\n        b.ajax({\n          url: a,\n          success: e,\n          dataType: \"json\",\n          headers: {\n            \"Content-Type\": \"text/plain\"\n          }\n        });\n      },\n      post: function (a, b, e) {\n        var c = g(\"form\", k({\n          method: \"post\",\n          action: a,\n          enctype: \"multipart/form-data\"\n        }, e), {\n          display: \"none\"\n        }, l.body);\n        p(b, function (a, b) {\n          g(\"input\", {\n            type: \"hidden\",\n            name: b,\n            value: a\n          }, void 0, c);\n        });\n        c.submit();\n        z(c);\n      }\n    };\n    \"\";\n    return b;\n  });\n  g(a, \"Extensions/Exporting/Exporting.js\", [a[\"Core/Renderer/HTML/AST.js\"], a[\"Core/Chart/Chart.js\"], a[\"Core/Chart/ChartNavigationComposition.js\"], a[\"Core/DefaultOptions.js\"], a[\"Extensions/Exporting/ExportingDefaults.js\"], a[\"Extensions/Exporting/ExportingSymbols.js\"], a[\"Core/Globals.js\"], a[\"Core/HttpUtilities.js\"], a[\"Core/Utilities.js\"]], function (a, e, g, n, z, k, p, b, c) {\n    e = n.defaultOptions;\n    var l = p.doc,\n        t = p.SVG_NS,\n        A = p.win,\n        x = c.addEvent,\n        v = c.css,\n        C = c.createElement,\n        J = c.discardElement,\n        D = c.extend,\n        N = c.find,\n        E = c.fireEvent,\n        O = c.isObject,\n        q = c.merge,\n        P = c.objectEach,\n        y = c.pick,\n        Q = c.removeEvent,\n        R = c.uniqueKey,\n        F;\n\n    (function (e) {\n      function n(a) {\n        var d = this,\n            b = d.renderer,\n            c = q(d.options.navigation.buttonOptions, a),\n            e = c.onclick,\n            m = c.menuItems,\n            r = c.symbolSize || 12;\n        d.btnCount || (d.btnCount = 0);\n        d.exportDivElements || (d.exportDivElements = [], d.exportSVGElements = []);\n\n        if (!1 !== c.enabled && c.theme) {\n          var f = c.theme,\n              I;\n          d.styledMode || (f.fill = y(f.fill, \"#ffffff\"), f.stroke = y(f.stroke, \"none\"));\n          e ? I = function (a) {\n            a && a.stopPropagation();\n            e.call(d, a);\n          } : m && (I = function (a) {\n            a && a.stopPropagation();\n            d.contextMenu(u.menuClassName, m, u.translateX, u.translateY, u.width, u.height, u);\n            u.setState(2);\n          });\n          c.text && c.symbol ? f.paddingLeft = y(f.paddingLeft, 30) : c.text || D(f, {\n            width: c.width,\n            height: c.height,\n            padding: 0\n          });\n          d.styledMode || (f[\"stroke-linecap\"] = \"round\", f.fill = y(f.fill, \"#ffffff\"), f.stroke = y(f.stroke, \"none\"));\n          var u = b.button(c.text, 0, 0, I, f).addClass(a.className).attr({\n            title: y(d.options.lang[c._titleKey || c.titleKey], \"\")\n          });\n          u.menuClassName = a.menuClassName || \"highcharts-menu-\" + d.btnCount++;\n\n          if (c.symbol) {\n            var l = b.symbol(c.symbol, c.symbolX - r / 2, c.symbolY - r / 2, r, r, {\n              width: r,\n              height: r\n            }).addClass(\"highcharts-button-symbol\").attr({\n              zIndex: 1\n            }).add(u);\n            d.styledMode || l.attr({\n              stroke: c.symbolStroke,\n              fill: c.symbolFill,\n              \"stroke-width\": c.symbolStrokeWidth || 1\n            });\n          }\n\n          u.add(d.exportingGroup).align(D(c, {\n            width: u.width,\n            x: y(c.x, d.buttonOffset)\n          }), !0, \"spacingBox\");\n          d.buttonOffset += (u.width + c.buttonSpacing) * (\"right\" === c.align ? -1 : 1);\n          d.exportSVGElements.push(u, l);\n        }\n      }\n\n      function z() {\n        if (this.printReverseInfo) {\n          var a = this.printReverseInfo,\n              c = a.childNodes,\n              b = a.origDisplay;\n          a = a.resetParams;\n          this.moveContainers(this.renderTo);\n          [].forEach.call(c, function (a, d) {\n            1 === a.nodeType && (a.style.display = b[d] || \"\");\n          });\n          this.isPrinting = !1;\n          a && this.setSize.apply(this, a);\n          delete this.printReverseInfo;\n          G = void 0;\n          E(this, \"afterPrint\");\n        }\n      }\n\n      function F() {\n        var a = l.body,\n            c = this.options.exporting.printMaxWidth,\n            b = {\n          childNodes: a.childNodes,\n          origDisplay: [],\n          resetParams: void 0\n        };\n        this.isPrinting = !0;\n        this.pointer.reset(null, 0);\n        E(this, \"beforePrint\");\n        c && this.chartWidth > c && (b.resetParams = [this.options.chart.width, void 0, !1], this.setSize(c, void 0, !1));\n        [].forEach.call(b.childNodes, function (a, d) {\n          1 === a.nodeType && (b.origDisplay[d] = a.style.display, a.style.display = \"none\");\n        });\n        this.moveContainers(a);\n        this.printReverseInfo = b;\n      }\n\n      function S(a) {\n        a.renderExporting();\n        x(a, \"redraw\", a.renderExporting);\n        x(a, \"destroy\", a.destroyExport);\n      }\n\n      function T(d, b, e, H, K, m, r) {\n        var f = this,\n            w = f.options.navigation,\n            B = f.chartWidth,\n            g = f.chartHeight,\n            p = \"cache-\" + d,\n            k = Math.max(K, m),\n            h = f[p];\n\n        if (!h) {\n          f.exportContextMenu = f[p] = h = C(\"div\", {\n            className: d\n          }, {\n            position: \"absolute\",\n            zIndex: 1E3,\n            padding: k + \"px\",\n            pointerEvents: \"auto\"\n          }, f.fixedDiv || f.container);\n          var q = C(\"ul\", {\n            className: \"highcharts-menu\"\n          }, {\n            listStyle: \"none\",\n            margin: 0,\n            padding: 0\n          }, h);\n          f.styledMode || v(q, D({\n            MozBoxShadow: \"3px 3px 10px #888\",\n            WebkitBoxShadow: \"3px 3px 10px #888\",\n            boxShadow: \"3px 3px 10px #888\"\n          }, w.menuStyle));\n\n          h.hideMenu = function () {\n            v(h, {\n              display: \"none\"\n            });\n            r && r.setState(0);\n            f.openMenu = !1;\n            v(f.renderTo, {\n              overflow: \"hidden\"\n            });\n            v(f.container, {\n              overflow: \"hidden\"\n            });\n            c.clearTimeout(h.hideTimer);\n            E(f, \"exportMenuHidden\");\n          };\n\n          f.exportEvents.push(x(h, \"mouseleave\", function () {\n            h.hideTimer = A.setTimeout(h.hideMenu, 500);\n          }), x(h, \"mouseenter\", function () {\n            c.clearTimeout(h.hideTimer);\n          }), x(l, \"mouseup\", function (a) {\n            f.pointer.inClass(a.target, d) || h.hideMenu();\n          }), x(h, \"click\", function () {\n            f.openMenu && h.hideMenu();\n          }));\n          b.forEach(function (d) {\n            \"string\" === typeof d && (d = f.options.exporting.menuItemDefinitions[d]);\n\n            if (O(d, !0)) {\n              var b = void 0;\n              d.separator ? b = C(\"hr\", void 0, void 0, q) : (\"viewData\" === d.textKey && f.isDataTableVisible && (d.textKey = \"hideData\"), b = C(\"li\", {\n                className: \"highcharts-menu-item\",\n                onclick: function (a) {\n                  a && a.stopPropagation();\n                  h.hideMenu();\n                  d.onclick && d.onclick.apply(f, arguments);\n                }\n              }, void 0, q), a.setElementHTML(b, d.text || f.options.lang[d.textKey]), f.styledMode || (b.onmouseover = function () {\n                v(this, w.menuItemHoverStyle);\n              }, b.onmouseout = function () {\n                v(this, w.menuItemStyle);\n              }, v(b, D({\n                cursor: \"pointer\"\n              }, w.menuItemStyle || {}))));\n              f.exportDivElements.push(b);\n            }\n          });\n          f.exportDivElements.push(q, h);\n          f.exportMenuWidth = h.offsetWidth;\n          f.exportMenuHeight = h.offsetHeight;\n        }\n\n        b = {\n          display: \"block\"\n        };\n        e + f.exportMenuWidth > B ? b.right = B - e - K - k + \"px\" : b.left = e - k + \"px\";\n        H + m + f.exportMenuHeight > g && \"top\" !== r.alignOptions.verticalAlign ? b.bottom = g - H - k + \"px\" : b.top = H + m - k + \"px\";\n        v(h, b);\n        v(f.renderTo, {\n          overflow: \"\"\n        });\n        v(f.container, {\n          overflow: \"\"\n        });\n        f.openMenu = !0;\n        E(f, \"exportMenuShown\");\n      }\n\n      function U(a) {\n        var d = a ? a.target : this,\n            b = d.exportSVGElements,\n            e = d.exportDivElements;\n        a = d.exportEvents;\n        var l;\n        b && (b.forEach(function (a, c) {\n          a && (a.onclick = a.ontouchstart = null, l = \"cache-\" + a.menuClassName, d[l] && delete d[l], b[c] = a.destroy());\n        }), b.length = 0);\n        d.exportingGroup && (d.exportingGroup.destroy(), delete d.exportingGroup);\n        e && (e.forEach(function (a, d) {\n          a && (c.clearTimeout(a.hideTimer), Q(a, \"mouseleave\"), e[d] = a.onmouseout = a.onmouseover = a.ontouchstart = a.onclick = null, J(a));\n        }), e.length = 0);\n        a && (a.forEach(function (a) {\n          a();\n        }), a.length = 0);\n      }\n\n      function V(a, c) {\n        c = this.getSVGForExport(a, c);\n        a = q(this.options.exporting, a);\n        b.post(a.url, {\n          filename: a.filename ? a.filename.replace(/\\//g, \"-\") : this.getFilename(),\n          type: a.type,\n          width: a.width || 0,\n          scale: a.scale,\n          svg: c\n        }, a.formAttributes);\n      }\n\n      function W() {\n        this.styledMode && this.inlineStyles();\n        return this.container.innerHTML;\n      }\n\n      function X() {\n        var a = this.userOptions.title && this.userOptions.title.text,\n            b = this.options.exporting.filename;\n        if (b) return b.replace(/\\//g, \"-\");\n        \"string\" === typeof a && (b = a.toLowerCase().replace(/<\\/?[^>]+(>|$)/g, \"\").replace(/[\\s_]+/g, \"-\").replace(/[^a-z0-9\\-]/g, \"\").replace(/^[\\-]+/g, \"\").replace(/[\\-]+/g, \"-\").substr(0, 24).replace(/[\\-]+$/g, \"\"));\n        if (!b || 5 > b.length) b = \"chart\";\n        return b;\n      }\n\n      function Y(a) {\n        var b,\n            d = q(this.options, a);\n        d.plotOptions = q(this.userOptions.plotOptions, a && a.plotOptions);\n        d.time = q(this.userOptions.time, a && a.time);\n        var c = C(\"div\", null, {\n          position: \"absolute\",\n          top: \"-9999em\",\n          width: this.chartWidth + \"px\",\n          height: this.chartHeight + \"px\"\n        }, l.body),\n            e = this.renderTo.style.width;\n        var m = this.renderTo.style.height;\n        e = d.exporting.sourceWidth || d.chart.width || /px$/.test(e) && parseInt(e, 10) || (d.isGantt ? 800 : 600);\n        m = d.exporting.sourceHeight || d.chart.height || /px$/.test(m) && parseInt(m, 10) || 400;\n        D(d.chart, {\n          animation: !1,\n          renderTo: c,\n          forExport: !0,\n          renderer: \"SVGRenderer\",\n          width: e,\n          height: m\n        });\n        d.exporting.enabled = !1;\n        delete d.data;\n        d.series = [];\n        this.series.forEach(function (a) {\n          b = q(a.userOptions, {\n            animation: !1,\n            enableMouseTracking: !1,\n            showCheckbox: !1,\n            visible: a.visible\n          });\n          b.isInternal || d.series.push(b);\n        });\n        var g = {};\n        this.axes.forEach(function (a) {\n          a.userOptions.internalKey || (a.userOptions.internalKey = R());\n          a.options.isInternal || (g[a.coll] || (g[a.coll] = !0, d[a.coll] = []), d[a.coll].push(q(a.userOptions, {\n            visible: a.visible\n          })));\n        });\n        var f = new this.constructor(d, this.callback);\n        a && [\"xAxis\", \"yAxis\", \"series\"].forEach(function (d) {\n          var b = {};\n          a[d] && (b[d] = a[d], f.update(b));\n        });\n        this.axes.forEach(function (a) {\n          var d = N(f.axes, function (d) {\n            return d.options.internalKey === a.userOptions.internalKey;\n          }),\n              b = a.getExtremes(),\n              c = b.userMin;\n          b = b.userMax;\n          d && (\"undefined\" !== typeof c && c !== d.min || \"undefined\" !== typeof b && b !== d.max) && d.setExtremes(c, b, !0, !1);\n        });\n        m = f.getChartHTML();\n        E(this, \"getSVG\", {\n          chartCopy: f\n        });\n        m = this.sanitizeSVG(m, d);\n        d = null;\n        f.destroy();\n        J(c);\n        return m;\n      }\n\n      function Z(a, b) {\n        var d = this.options.exporting;\n        return this.getSVG(q({\n          chart: {\n            borderRadius: 0\n          }\n        }, d.chartOptions, b, {\n          exporting: {\n            sourceWidth: a && a.sourceWidth || d.sourceWidth,\n            sourceHeight: a && a.sourceHeight || d.sourceHeight\n          }\n        }));\n      }\n\n      function aa(a) {\n        return a.replace(/([A-Z])/g, function (a, b) {\n          return \"-\" + b.toLowerCase();\n        });\n      }\n\n      function ba() {\n        function a(d) {\n          var e = {},\n              f,\n              w;\n\n          if (r && 1 === d.nodeType && -1 === ca.indexOf(d.nodeName)) {\n            var l = A.getComputedStyle(d, null);\n            var m = \"svg\" === d.nodeName ? {} : A.getComputedStyle(d.parentNode, null);\n\n            if (!g[d.nodeName]) {\n              k = r.getElementsByTagName(\"svg\")[0];\n              var h = r.createElementNS(d.namespaceURI, d.nodeName);\n              k.appendChild(h);\n              g[d.nodeName] = q(A.getComputedStyle(h, null));\n              \"text\" === d.nodeName && delete g.text.fill;\n              k.removeChild(h);\n            }\n\n            for (var B in l) if (p.isFirefox || p.isMS || p.isSafari || Object.hasOwnProperty.call(l, B)) {\n              var t = l[B],\n                  n = B;\n              h = f = !1;\n\n              if (c.length) {\n                for (w = c.length; w-- && !f;) f = c[w].test(n);\n\n                h = !f;\n              }\n\n              \"transform\" === n && \"none\" === t && (h = !0);\n\n              for (w = b.length; w-- && !h;) h = b[w].test(n) || \"function\" === typeof t;\n\n              h || m[n] === t && \"svg\" !== d.nodeName || g[d.nodeName][n] === t || (L && -1 === L.indexOf(n) ? \"parentRule\" !== n && (e[n] = t) : t && d.setAttribute(aa(n), t));\n            }\n\n            v(d, e);\n            \"svg\" === d.nodeName && d.setAttribute(\"stroke-width\", \"1px\");\n            \"text\" !== d.nodeName && [].forEach.call(d.children || d.childNodes, a);\n          }\n        }\n\n        var b = da,\n            c = e.inlineWhitelist,\n            g = {},\n            k,\n            m = l.createElement(\"iframe\");\n        v(m, {\n          width: \"1px\",\n          height: \"1px\",\n          visibility: \"hidden\"\n        });\n        l.body.appendChild(m);\n        var r = m.contentWindow && m.contentWindow.document;\n        r && r.body.appendChild(r.createElementNS(t, \"svg\"));\n        a(this.container.querySelector(\"svg\"));\n        k.parentNode.removeChild(k);\n        m.parentNode.removeChild(m);\n      }\n\n      function ea(a) {\n        (this.fixedDiv ? [this.fixedDiv, this.scrollingContainer] : [this.container]).forEach(function (d) {\n          a.appendChild(d);\n        });\n      }\n\n      function fa() {\n        var a = this;\n        a.exporting = {\n          update: function (d, b) {\n            a.isDirtyExporting = !0;\n            q(!0, a.options.exporting, d);\n            y(b, !0) && a.redraw();\n          }\n        };\n        g.compose(a).navigation.addUpdate(function (d, b) {\n          a.isDirtyExporting = !0;\n          q(!0, a.options.navigation, d);\n          y(b, !0) && a.redraw();\n        });\n      }\n\n      function ha() {\n        var a = this;\n        a.isPrinting || (G = a, p.isSafari || a.beforePrint(), setTimeout(function () {\n          A.focus();\n          A.print();\n          p.isSafari || setTimeout(function () {\n            a.afterPrint();\n          }, 1E3);\n        }, 1));\n      }\n\n      function ia() {\n        var a = this,\n            b = a.options.exporting,\n            c = b.buttons,\n            e = a.isDirtyExporting || !a.exportSVGElements;\n        a.buttonOffset = 0;\n        a.isDirtyExporting && a.destroyExport();\n        e && !1 !== b.enabled && (a.exportEvents = [], a.exportingGroup = a.exportingGroup || a.renderer.g(\"exporting-group\").attr({\n          zIndex: 3\n        }).add(), P(c, function (b) {\n          a.addButton(b);\n        }), a.isDirtyExporting = !1);\n      }\n\n      function ja(a, b) {\n        var c = a.indexOf(\"</svg>\") + 6,\n            d = a.substr(c);\n        a = a.substr(0, c);\n        b && b.exporting && b.exporting.allowHTML && d && (d = '<foreignObject x=\"0\" y=\"0\" width=\"' + b.chart.width + '\" height=\"' + b.chart.height + '\"><body xmlns=\"http://www.w3.org/1999/xhtml\">' + d.replace(/(<(?:img|br).*?(?=>))>/g, \"$1 />\") + \"</body></foreignObject>\", a = a.replace(\"</svg>\", d + \"</svg>\"));\n        a = a.replace(/zIndex=\"[^\"]+\"/g, \"\").replace(/symbolName=\"[^\"]+\"/g, \"\").replace(/jQuery[0-9]+=\"[^\"]+\"/g, \"\").replace(/url\\((\"|&quot;)(.*?)(\"|&quot;);?\\)/g, \"url($2)\").replace(/url\\([^#]+#/g, \"url(#\").replace(/<svg /, '<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" ').replace(/ (|NS[0-9]+:)href=/g, \" xlink:href=\").replace(/\\n/, \" \").replace(/(fill|stroke)=\"rgba\\(([ 0-9]+,[ 0-9]+,[ 0-9]+),([ 0-9\\.]+)\\)\"/g, '$1=\"rgb($2)\" $1-opacity=\"$3\"').replace(/&nbsp;/g, \"\\u00a0\").replace(/&shy;/g, \"\\u00ad\");\n        this.ieSanitizeSVG && (a = this.ieSanitizeSVG(a));\n        return a;\n      }\n\n      var M = [],\n          da = [/-/, /^(clipPath|cssText|d|height|width)$/, /^font$/, /[lL]ogical(Width|Height)$/, /perspective/, /TapHighlightColor/, /^transition/, /^length$/],\n          L = \"fill stroke strokeLinecap strokeLinejoin strokeWidth textAnchor x y\".split(\" \");\n      e.inlineWhitelist = [];\n      var ca = [\"clipPath\", \"defs\", \"desc\"],\n          G;\n\n      e.compose = function (a, b) {\n        k.compose(b);\n        -1 === M.indexOf(a) && (M.push(a), b = a.prototype, b.afterPrint = z, b.exportChart = V, b.inlineStyles = ba, b.print = ha, b.sanitizeSVG = ja, b.getChartHTML = W, b.getSVG = Y, b.getSVGForExport = Z, b.getFilename = X, b.moveContainers = ea, b.beforePrint = F, b.contextMenu = T, b.addButton = n, b.destroyExport = U, b.renderExporting = ia, b.callbacks.push(S), x(a, \"init\", fa), p.isSafari && p.win.matchMedia(\"print\").addListener(function (a) {\n          G && (a.matches ? G.beforePrint() : G.afterPrint());\n        }));\n      };\n    })(F || (F = {}));\n\n    e.exporting = q(z.exporting, e.exporting);\n    e.lang = q(z.lang, e.lang);\n    e.navigation = q(z.navigation, e.navigation);\n    \"\";\n    \"\";\n    return F;\n  });\n  g(a, \"masters/modules/exporting.src.js\", [a[\"Core/Globals.js\"], a[\"Extensions/Exporting/Exporting.js\"], a[\"Core/HttpUtilities.js\"]], function (a, e, g) {\n    a.HttpUtilities = g;\n    a.ajax = g.ajax;\n    a.getJSON = g.getJSON;\n    a.post = g.post;\n    e.compose(a.Chart, a.Renderer);\n  });\n});","map":{"version":3,"mappings":"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","names":["factory","module","define","Highcharts","undefined","_registerModule","obj","path","args","fn","CustomEvent","window","detail","_modules","Chart","H","AST","U","addEvent","fireEvent","Fullscreen","chart","container","fullscreenChange","requestFullscreen","exitFullscreen","Fullscreen.prototype.close","fullscreen","optionsChart","Document","Fullscreen.prototype.open","unbindChange_1","unbindDestroy_1","fullscreen.unbindFullscreenEvent","promise","alert","prototype","Fullscreen.prototype.setButtonText","exportDivElements","exportingOptions","menuItems","lang","exportDivElement","Fullscreen.prototype.toggle","isOpen","close","open","ChartNavigationComposition","compose","Additions","Additions.prototype.addUpdate","updateFn","Additions.prototype.update","options","redraw","_this","isTouchDevice","ExportingDefaults","exporting","type","url","pdfFont","normal","bold","bolditalic","italic","printMaxWidth","scale","buttons","contextButton","className","menuClassName","symbol","titleKey","menuItemDefinitions","viewFullscreen","textKey","onclick","printChart","separator","downloadPNG","downloadJPEG","downloadPDF","downloadSVG","contextButtonTitle","navigation","buttonOptions","symbolSize","symbolX","symbolY","align","buttonSpacing","height","verticalAlign","width","symbolFill","symbolStroke","symbolStrokeWidth","theme","padding","menuStyle","border","background","menuItemStyle","color","fontSize","transition","menuItemHoverStyle","ExportingSymbols","menu","x","y","arr","menuball","h","modifiedClasses","SVGRendererClass","symbols","G","doc","createElement","discardElement","merge","objectEach","HttpUtilities","ajax","settings","headers","json","xml","text","octet","r","XMLHttpRequest","toUpperCase","val","key","r.onreadystatechange","res","JSON","e","Error","getJSON","success","dataType","post","data","formAttributes","form","method","action","enctype","display","name","value","D","HU","defaultOptions","SVG_NS","win","css","extend","find","isObject","pick","removeEvent","uniqueKey","Exporting","addButton","renderer","btnOptions","attr","callback","button","title","zIndex","stroke","fill","afterPrint","printReverseInfo","_a","childNodes","origDisplay","resetParams","moveContainers","renderTo","node","i","isPrinting","setSize","apply","printingChart","beforePrint","body","pointer","reset","chartWidth","chartCallback","renderExporting","destroyExport","contextMenu","items","navOptions","chartHeight","cacheName","menuPadding","Math","position","pointerEvents","listStyle","margin","innerMenu","MozBoxShadow","WebkitBoxShadow","boxShadow","menu.hideMenu","overflow","item","element","arguments","element.onmouseover","element.onmouseout","cursor","exportSVGElements","exportEvents","elem","unbind","exportChart","chartOptions","svg","filename","getChartHTML","getFilename","s","getSVG","seriesOptions","userOptions","plotOptions","time","sandbox","top","cssWidth","style","cssHeight","sourceWidth","parseInt","sourceHeight","animation","forExport","series","forEach","serie","enableMouseTracking","showCheckbox","visible","colls","axes","axis","chartCopy","constructor","coll","collOptions","axisCopy","copy","extremes","userMin","userMax","sanitizeSVG","getSVGForExport","chartExportingOptions","borderRadius","hyphenate","prop","a","b","inlineStyles","recurse","filteredStyles","whitelisted","iframeDoc","unstyledElements","defaultStyles","dummySVG","dummy","p","styles","Object","blacklisted","whitelist","blacklist","parentStyles","inlineToAttributes","inlineBlacklist","iframe","visibility","moveTo","fixedDiv","scrollingContainer","div","onChartInit","update","print","setTimeout","isDirty","split","html","composedClasses","ChartClass","chartProto","mqlEvent","Renderer"],"sources":["/home/theo/saas/frontend/node_modules/highcharts/modules/exporting.src.js"],"sourcesContent":["/**\n * @license Highcharts JS v10.2.0 (2022-07-05)\n *\n * Exporting module\n *\n * (c) 2010-2021 Torstein Honsi\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/exporting', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(\n                    new CustomEvent(\n                        'HighchartsModuleLoaded',\n                        { detail: { path: path, module: obj[path] }\n                    })\n                );\n            }\n        }\n    }\n    _registerModule(_modules, 'Extensions/FullScreen.js', [_modules['Core/Chart/Chart.js'], _modules['Core/Globals.js'], _modules['Core/Renderer/HTML/AST.js'], _modules['Core/Utilities.js']], function (Chart, H, AST, U) {\n        /* *\n         * (c) 2009-2021 Rafal Sebestjanski\n         *\n         * Full screen for Highcharts\n         *\n         * License: www.highcharts.com/license\n         */\n        var doc = H.doc;\n        var addEvent = U.addEvent,\n            fireEvent = U.fireEvent;\n        /**\n         * The module allows user to enable display chart in full screen mode.\n         * Used in StockTools too.\n         * Based on default solutions in browsers.\n         *\n         */\n        /* eslint-disable no-invalid-this, valid-jsdoc */\n        /**\n         * Handles displaying chart's container in the fullscreen mode.\n         *\n         * **Note**: Fullscreen is not supported on iPhone due to iOS limitations.\n         *\n         * @class\n         * @name Highcharts.Fullscreen\n         * @hideconstructor\n         * @requires modules/full-screen\n         */\n        var Fullscreen = /** @class */ (function () {\n                /* *\n                 *\n                 *  Constructors\n                 *\n                 * */\n                function Fullscreen(chart) {\n                    /**\n                     * Chart managed by the fullscreen controller.\n                     * @name Highcharts.Fullscreen#chart\n                     * @type {Highcharts.Chart}\n                     */\n                    this.chart = chart;\n                /**\n                 * The flag is set to `true` when the chart is displayed in\n                 * the fullscreen mode.\n                 *\n                 * @name Highcharts.Fullscreen#isOpen\n                 * @type {boolean|undefined}\n                 * @since 8.0.1\n                 */\n                this.isOpen = false;\n                var container = chart.renderTo;\n                // Hold event and methods available only for a current browser.\n                if (!this.browserProps) {\n                    if (typeof container.requestFullscreen === 'function') {\n                        this.browserProps = {\n                            fullscreenChange: 'fullscreenchange',\n                            requestFullscreen: 'requestFullscreen',\n                            exitFullscreen: 'exitFullscreen'\n                        };\n                    }\n                    else if (container.mozRequestFullScreen) {\n                        this.browserProps = {\n                            fullscreenChange: 'mozfullscreenchange',\n                            requestFullscreen: 'mozRequestFullScreen',\n                            exitFullscreen: 'mozCancelFullScreen'\n                        };\n                    }\n                    else if (container.webkitRequestFullScreen) {\n                        this.browserProps = {\n                            fullscreenChange: 'webkitfullscreenchange',\n                            requestFullscreen: 'webkitRequestFullScreen',\n                            exitFullscreen: 'webkitExitFullscreen'\n                        };\n                    }\n                    else if (container.msRequestFullscreen) {\n                        this.browserProps = {\n                            fullscreenChange: 'MSFullscreenChange',\n                            requestFullscreen: 'msRequestFullscreen',\n                            exitFullscreen: 'msExitFullscreen'\n                        };\n                    }\n                }\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Stops displaying the chart in fullscreen mode.\n             * Exporting module required.\n             *\n             * @since       8.0.1\n             *\n             * @function    Highcharts.Fullscreen#close\n             * @return      {void}\n             * @requires    modules/full-screen\n             */\n            Fullscreen.prototype.close = function () {\n                var fullscreen = this,\n                    chart = fullscreen.chart,\n                    optionsChart = chart.options.chart;\n                fireEvent(chart, 'fullscreenClose', null, function () {\n                    // Don't fire exitFullscreen() when user exited\n                    // using 'Escape' button.\n                    if (fullscreen.isOpen &&\n                        fullscreen.browserProps &&\n                        chart.container.ownerDocument instanceof Document) {\n                        chart.container.ownerDocument[fullscreen.browserProps.exitFullscreen]();\n                    }\n                    // Unbind event as it's necessary only before exiting\n                    // from fullscreen.\n                    if (fullscreen.unbindFullscreenEvent) {\n                        fullscreen.unbindFullscreenEvent = fullscreen\n                            .unbindFullscreenEvent();\n                    }\n                    chart.setSize(fullscreen.origWidth, fullscreen.origHeight, false);\n                    fullscreen.origWidth = void 0;\n                    fullscreen.origHeight = void 0;\n                    optionsChart.width = fullscreen.origWidthOption;\n                    optionsChart.height = fullscreen.origHeightOption;\n                    fullscreen.origWidthOption = void 0;\n                    fullscreen.origHeightOption = void 0;\n                    fullscreen.isOpen = false;\n                    fullscreen.setButtonText();\n                });\n            };\n            /**\n             * Displays the chart in fullscreen mode.\n             * When fired customly by user before exporting context button is created,\n             * button's text will not be replaced - it's on the user side.\n             * Exporting module required.\n             *\n             * @since       8.0.1\n             *\n             * @function Highcharts.Fullscreen#open\n             * @return      {void}\n             * @requires    modules/full-screen\n             */\n            Fullscreen.prototype.open = function () {\n                var fullscreen = this,\n                    chart = fullscreen.chart,\n                    optionsChart = chart.options.chart;\n                fireEvent(chart, 'fullscreenOpen', null, function () {\n                    if (optionsChart) {\n                        fullscreen.origWidthOption = optionsChart.width;\n                        fullscreen.origHeightOption = optionsChart.height;\n                    }\n                    fullscreen.origWidth = chart.chartWidth;\n                    fullscreen.origHeight = chart.chartHeight;\n                    // Handle exitFullscreen() method when user clicks 'Escape' button.\n                    if (fullscreen.browserProps) {\n                        var unbindChange_1 = addEvent(chart.container.ownerDocument, // chart's document\n                            fullscreen.browserProps.fullscreenChange,\n                            function () {\n                                // Handle lack of async of browser's\n                                // fullScreenChange event.\n                                if (fullscreen.isOpen) {\n                                    fullscreen.isOpen = false;\n                                fullscreen.close();\n                            }\n                            else {\n                                chart.setSize(null, null, false);\n                                fullscreen.isOpen = true;\n                                fullscreen.setButtonText();\n                            }\n                        });\n                        var unbindDestroy_1 = addEvent(chart, 'destroy',\n                            unbindChange_1);\n                        fullscreen.unbindFullscreenEvent = function () {\n                            unbindChange_1();\n                            unbindDestroy_1();\n                        };\n                        var promise = chart.renderTo[fullscreen.browserProps.requestFullscreen]();\n                        if (promise) {\n                            // No dot notation because of IE8 compatibility\n                            promise['catch'](function () {\n                                alert(// eslint-disable-line no-alert\n                                'Full screen is not supported inside a frame.');\n                            });\n                        }\n                    }\n                });\n            };\n            /**\n             * Replaces the exporting context button's text when toogling the\n             * fullscreen mode.\n             *\n             * @private\n             *\n             * @since 8.0.1\n             *\n             * @requires modules/full-screen\n             */\n            Fullscreen.prototype.setButtonText = function () {\n                var chart = this.chart,\n                    exportDivElements = chart.exportDivElements,\n                    exportingOptions = chart.options.exporting,\n                    menuItems = (exportingOptions &&\n                        exportingOptions.buttons &&\n                        exportingOptions.buttons.contextButton.menuItems),\n                    lang = chart.options.lang;\n                if (exportingOptions &&\n                    exportingOptions.menuItemDefinitions &&\n                    lang &&\n                    lang.exitFullscreen &&\n                    lang.viewFullscreen &&\n                    menuItems &&\n                    exportDivElements) {\n                    var exportDivElement = exportDivElements[menuItems.indexOf('viewFullscreen')];\n                    if (exportDivElement) {\n                        AST.setElementHTML(exportDivElement, !this.isOpen ?\n                            (exportingOptions.menuItemDefinitions.viewFullscreen\n                                .text ||\n                                lang.viewFullscreen) : lang.exitFullscreen);\n                    }\n                }\n            };\n            /**\n             * Toggles displaying the chart in fullscreen mode.\n             * By default, when the exporting module is enabled, a context button with\n             * a drop down menu in the upper right corner accesses this function.\n             * Exporting module required.\n             *\n             * @since 8.0.1\n             *\n             * @sample      highcharts/members/chart-togglefullscreen/\n             *              Toggle fullscreen mode from a HTML button\n             *\n             * @function Highcharts.Fullscreen#toggle\n             * @requires    modules/full-screen\n             */\n            Fullscreen.prototype.toggle = function () {\n                var fullscreen = this;\n                if (!fullscreen.isOpen) {\n                    fullscreen.open();\n                }\n                else {\n                    fullscreen.close();\n                }\n            };\n            return Fullscreen;\n        }());\n        H.Fullscreen = Fullscreen;\n        // Initialize fullscreen\n        addEvent(Chart, 'beforeRender', function () {\n            /**\n             * @name Highcharts.Chart#fullscreen\n             * @type {Highcharts.Fullscreen}\n             * @requires modules/full-screen\n             */\n            this.fullscreen = new H.Fullscreen(this);\n        });\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Gets fired when closing the fullscreen\n         *\n         * @callback Highcharts.FullScreenfullscreenCloseCallbackFunction\n         *\n         * @param {Highcharts.Chart} chart\n         *        The chart on which the event occured.\n         *\n         * @param {global.Event} event\n         *        The event that occured.\n         */\n        /**\n         * Gets fired when opening the fullscreen\n         *\n         * @callback Highcharts.FullScreenfullscreenOpenCallbackFunction\n         *\n         * @param {Highcharts.Chart} chart\n         *        The chart on which the event occured.\n         *\n         * @param {global.Event} event\n         *        The event that occured.\n         */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Fires when a fullscreen is closed through the context menu item,\n         * or a fullscreen is closed on the `Escape` button click,\n         * or the `Chart.fullscreen.close` method.\n         *\n         * @sample highcharts/chart/events-fullscreen\n         *         Title size change on fullscreen open\n         *\n         * @type      {Highcharts.FullScreenfullscreenCloseCallbackFunction}\n         * @since 10.1.0\n         * @context   Highcharts.Chart\n         * @requires  modules/full-screen\n         * @apioption chart.events.fullscreenClose\n         */\n        /**\n         * Fires when a fullscreen is opened through the context menu item,\n         * or the `Chart.fullscreen.open` method.\n         *\n         * @sample highcharts/chart/events-fullscreen\n         *         Title size change on fullscreen open\n         *\n         * @type      {Highcharts.FullScreenfullscreenOpenCallbackFunction}\n         * @since 10.1.0\n         * @context   Highcharts.Chart\n         * @requires  modules/full-screen\n         * @apioption chart.events.fullscreenOpen\n         */\n        (''); // keeps doclets above in transpiled file\n\n        return H.Fullscreen;\n    });\n    _registerModule(_modules, 'Core/Chart/ChartNavigationComposition.js', [], function () {\n        /**\n         *\n         *  (c) 2010-2021 Paweł Fus\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var ChartNavigationComposition;\n        (function (ChartNavigationComposition) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * @private\n             */\n            function compose(chart) {\n                if (!chart.navigation) {\n                    chart.navigation = new Additions(chart);\n                }\n                return chart;\n            }\n            ChartNavigationComposition.compose = compose;\n            /* *\n             *\n             *  Class\n             *\n             * */\n            /**\n             * Initializes `chart.navigation` object which delegates `update()` methods\n             * to all other common classes (used in exporting and navigationBindings).\n             * @private\n             */\n            var Additions = /** @class */ (function () {\n                    /* *\n                     *\n                     *  Constructor\n                     *\n                     * */\n                    function Additions(chart) {\n                        this.updates = [];\n                    this.chart = chart;\n                }\n                /* *\n                 *\n                 *  Functions\n                 *\n                 * */\n                /**\n                 * Registers an `update()` method in the `chart.navigation` object.\n                 *\n                 * @private\n                 * @param {UpdateFunction} updateFn\n                 * The `update()` method that will be called in `chart.update()`.\n                 */\n                Additions.prototype.addUpdate = function (updateFn) {\n                    this.chart.navigation.updates.push(updateFn);\n                };\n                /**\n                 * @private\n                 */\n                Additions.prototype.update = function (options, redraw) {\n                    var _this = this;\n                    this.updates.forEach(function (updateFn) {\n                        updateFn.call(_this.chart, options, redraw);\n                    });\n                };\n                return Additions;\n            }());\n            ChartNavigationComposition.Additions = Additions;\n        })(ChartNavigationComposition || (ChartNavigationComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ChartNavigationComposition;\n    });\n    _registerModule(_modules, 'Extensions/Exporting/ExportingDefaults.js', [_modules['Core/Globals.js']], function (H) {\n        /* *\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var isTouchDevice = H.isTouchDevice;\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        // Add the export related options\n        /**\n         * Options for the exporting module. For an overview on the matter, see\n         * [the docs](https://www.highcharts.com/docs/export-module/export-module-overview).\n         *\n         * @requires     modules/exporting\n         * @optionparent exporting\n         */\n        var exporting = {\n                /**\n                 * Experimental setting to allow HTML inside the chart (added through\n                 * the `useHTML` options), directly in the exported image. This allows\n                 * you to preserve complicated HTML structures like tables or bi-directional\n                 * text in exported charts.\n                 *\n                 * Disclaimer: The HTML is rendered in a `foreignObject` tag in the\n                 * generated SVG. The official export server is based on PhantomJS,\n                 * which supports this, but other SVG clients, like Batik, does not\n                 * support it. This also applies to downloaded SVG that you want to\n                 * open in a desktop client.\n                 *\n                 * @type      {boolean}\n                 * @default   false\n                 * @since     4.1.8\n                 * @apioption exporting.allowHTML\n                 */\n                /**\n                 * Additional chart options to be merged into the chart before exporting to\n                 * an image format. This does not apply to printing the chart via the export\n                 * menu.\n                 *\n                 * For example, a common use case is to add data labels to improve\n                 * readability of the exported chart, or to add a printer-friendly color\n                 * scheme to exported PDFs.\n                 *\n                 * @sample {highcharts} highcharts/exporting/chartoptions-data-labels/\n                 *         Added data labels\n                 * @sample {highstock} highcharts/exporting/chartoptions-data-labels/\n                 *         Added data labels\n                 *\n                 * @type      {Highcharts.Options}\n                 * @apioption exporting.chartOptions\n                 */\n                /**\n                 * Whether to enable the exporting module. Disabling the module will\n                 * hide the context button, but API methods will still be available.\n                 *\n                 * @sample {highcharts} highcharts/exporting/enabled-false/\n                 *         Exporting module is loaded but disabled\n                 * @sample {highstock} highcharts/exporting/enabled-false/\n                 *         Exporting module is loaded but disabled\n                 *\n                 * @type      {boolean}\n                 * @default   true\n                 * @since     2.0\n                 * @apioption exporting.enabled\n                 */\n                /**\n                 * Function to call if the offline-exporting module fails to export\n                 * a chart on the client side, and [fallbackToExportServer](\n                 * #exporting.fallbackToExportServer) is disabled. If left undefined, an\n                 * exception is thrown instead. Receives two parameters, the exporting\n                 * options, and the error from the module.\n                 *\n                 * @see [fallbackToExportServer](#exporting.fallbackToExportServer)\n                 *\n                 * @type      {Highcharts.ExportingErrorCallbackFunction}\n                 * @since     5.0.0\n                 * @requires  modules/exporting\n                 * @requires  modules/offline-exporting\n                 * @apioption exporting.error\n                 */\n                /**\n                 * Whether or not to fall back to the export server if the offline-exporting\n                 * module is unable to export the chart on the client side. This happens for\n                 * certain browsers, and certain features (e.g.\n                 * [allowHTML](#exporting.allowHTML)), depending on the image type exporting\n                 * to. For very complex charts, it is possible that export can fail in\n                 * browsers that don't support Blob objects, due to data URL length limits.\n                 * It is recommended to define the [exporting.error](#exporting.error)\n                 * handler if disabling fallback, in order to notify users in case export\n                 * fails.\n                 *\n                 * @type      {boolean}\n                 * @default   true\n                 * @since     4.1.8\n                 * @requires  modules/exporting\n                 * @requires  modules/offline-exporting\n                 * @apioption exporting.fallbackToExportServer\n                 */\n                /**\n                 * The filename, without extension, to use for the exported chart.\n                 *\n                 * @sample {highcharts} highcharts/exporting/filename/\n                 *         Custom file name\n                 * @sample {highstock} highcharts/exporting/filename/\n                 *         Custom file name\n                 *\n                 * @type      {string}\n                 * @default   chart\n                 * @since     2.0\n                 * @apioption exporting.filename\n                 */\n                /**\n                 * An object containing additional key value data for the POST form that\n                 * sends the SVG to the export server. For example, a `target` can be set to\n                 * make sure the generated image is received in another frame, or a custom\n                 * `enctype` or `encoding` can be set.\n                 *\n                 * @type      {Highcharts.HTMLAttributes}\n                 * @since     3.0.8\n                 * @apioption exporting.formAttributes\n                 */\n                /**\n                 * Path where Highcharts will look for export module dependencies to\n                 * load on demand if they don't already exist on `window`. Should currently\n                 * point to location of [CanVG](https://github.com/canvg/canvg) library,\n                 * [jsPDF](https://github.com/parallax/jsPDF) and\n                 * [svg2pdf.js](https://github.com/yWorks/svg2pdf.js), required for client\n                 * side export in certain browsers.\n                 *\n                 * @type      {string}\n                 * @default   https://code.highcharts.com/{version}/lib\n                 * @since     5.0.0\n                 * @apioption exporting.libURL\n                 */\n                /**\n                 * Analogous to [sourceWidth](#exporting.sourceWidth).\n                 *\n                 * @type      {number}\n                 * @since     3.0\n                 * @apioption exporting.sourceHeight\n                 */\n                /**\n                 * The width of the original chart when exported, unless an explicit\n                 * [chart.width](#chart.width) is set, or a pixel width is set on the\n                 * container. The width exported raster image is then multiplied by\n                 * [scale](#exporting.scale).\n                 *\n                 * @sample {highcharts} highcharts/exporting/sourcewidth/\n                 *         Source size demo\n                 * @sample {highstock} highcharts/exporting/sourcewidth/\n                 *         Source size demo\n                 * @sample {highmaps} maps/exporting/sourcewidth/\n                 *         Source size demo\n                 *\n                 * @type      {number}\n                 * @since     3.0\n                 * @apioption exporting.sourceWidth\n                 */\n                /**\n                 * The pixel width of charts exported to PNG or JPG. As of Highcharts\n                 * 3.0, the default pixel width is a function of the [chart.width](\n                 * #chart.width) or [exporting.sourceWidth](#exporting.sourceWidth) and the\n                 * [exporting.scale](#exporting.scale).\n                 *\n                 * @sample {highcharts} highcharts/exporting/width/\n                 *         Export to 200px wide images\n                 * @sample {highstock} highcharts/exporting/width/\n                 *         Export to 200px wide images\n                 *\n                 * @type      {number}\n                 * @since     2.0\n                 * @apioption exporting.width\n                 */\n                /**\n                 * Default MIME type for exporting if `chart.exportChart()` is called\n                 * without specifying a `type` option. Possible values are `image/png`,\n                 *  `image/jpeg`, `application/pdf` and `image/svg+xml`.\n                 *\n                 * @type  {Highcharts.ExportingMimeTypeValue}\n                 * @since 2.0\n                 */\n                type: 'image/png',\n                /**\n                 * The URL for the server module converting the SVG string to an image\n                 * format. By default this points to Highchart's free web service.\n                 *\n                 * @since 2.0\n                 */\n                url: 'https://export.highcharts.com/',\n                /**\n                 * Settings for a custom font for the exported PDF, when using the\n                 * `offline-exporting` module. This is used for languages containing\n                 * non-ASCII characters, like Chinese, Russian, Japanese etc.\n                 *\n                 * As described in the [jsPDF\n                 * docs](https://github.com/parallax/jsPDF#use-of-unicode-characters--utf-8),\n                 * the 14 standard fonts in PDF are limited to the ASCII-codepage.\n                 * Therefore, in order to support other text in the exported PDF, one or\n                 * more TTF font files have to be passed on to the exporting module.\n                 *\n                 * See more in [the\n                 * docs](https://www.highcharts.com/docs/export-module/client-side-export).\n                 *\n                 * @sample {highcharts} highcharts/exporting/offline-download-pdffont/\n                 *         Download PDF in a language containing non-Latin characters.\n                 *\n                 * @since 10.0.0\n                 * @requires modules/offline-exporting\n                 */\n                pdfFont: {\n                    /**\n                     * The TTF font file for normal `font-style`. If font variations like\n                     * `bold` or `italic` are not defined, the `normal` font will be used\n                     * for those too.\n                     *\n                     * @type string|undefined\n                     */\n                    normal: void 0,\n                    /**\n                     * The TTF font file for bold text.\n                     *\n                     * @type string|undefined\n                     */\n                    bold: void 0,\n                    /**\n                     * The TTF font file for bold and italic text.\n                     *\n                     * @type string|undefined\n                     */\n                    bolditalic: void 0,\n                    /**\n                     * The TTF font file for italic text.\n                     *\n                     * @type string|undefined\n                     */\n                    italic: void 0\n                },\n                /**\n                 * When printing the chart from the menu item in the burger menu, if\n                 * the on-screen chart exceeds this width, it is resized. After printing\n                 * or cancelled, it is restored. The default width makes the chart\n                 * fit into typical paper format. Note that this does not affect the\n                 * chart when printing the web page as a whole.\n                 *\n                 * @since 4.2.5\n                 */\n                printMaxWidth: 780,\n                /**\n                 * Defines the scale or zoom factor for the exported image compared\n                 * to the on-screen display. While for instance a 600px wide chart\n                 * may look good on a website, it will look bad in print. The default\n                 * scale of 2 makes this chart export to a 1200px PNG or JPG.\n                 *\n                 * @see [chart.width](#chart.width)\n                 * @see [exporting.sourceWidth](#exporting.sourceWidth)\n                 *\n                 * @sample {highcharts} highcharts/exporting/scale/\n                 *         Scale demonstrated\n                 * @sample {highstock} highcharts/exporting/scale/\n                 *         Scale demonstrated\n                 * @sample {highmaps} maps/exporting/scale/\n                 *         Scale demonstrated\n                 *\n                 * @since 3.0\n                 */\n                scale: 2,\n                /**\n                 * Options for the export related buttons, print and export. In addition\n                 * to the default buttons listed here, custom buttons can be added.\n                 * See [navigation.buttonOptions](#navigation.buttonOptions) for general\n                 * options.\n                 *\n                 * @type     {Highcharts.Dictionary<*>}\n                 * @requires modules/exporting\n                 */\n                buttons: {\n                    /**\n                     * Options for the export button.\n                     *\n                     * In styled mode, export button styles can be applied with the\n                     * `.highcharts-contextbutton` class.\n                     *\n                     * @declare  Highcharts.ExportingButtonsOptionsObject\n                     * @extends  navigation.buttonOptions\n                     * @requires modules/exporting\n                     */\n                    contextButton: {\n                        /**\n                         * A click handler callback to use on the button directly instead of\n                         * the popup menu.\n                         *\n                         * @sample highcharts/exporting/buttons-contextbutton-onclick/\n                         *         Skip the menu and export the chart directly\n                         *\n                         * @type      {Function}\n                         * @since     2.0\n                         * @apioption exporting.buttons.contextButton.onclick\n                         */\n                        /**\n                         * See [navigation.buttonOptions.symbolFill](\n                         * #navigation.buttonOptions.symbolFill).\n                         *\n                         * @type      {Highcharts.ColorString}\n                         * @default   #666666\n                         * @since     2.0\n                         * @apioption exporting.buttons.contextButton.symbolFill\n                         */\n                        /**\n                         * The horizontal position of the button relative to the `align`\n                         * option.\n                         *\n                         * @type      {number}\n                         * @default   -10\n                         * @since     2.0\n                         * @apioption exporting.buttons.contextButton.x\n                         */\n                        /**\n                         * The class name of the context button.\n                         */\n                        className: 'highcharts-contextbutton',\n                        /**\n                         * The class name of the menu appearing from the button.\n                         */\n                        menuClassName: 'highcharts-contextmenu',\n                        /**\n                         * The symbol for the button. Points to a definition function in\n                         * the `Highcharts.Renderer.symbols` collection. The default\n                         * `menu` function is part of the exporting module. Possible\n                         * values are \"circle\", \"square\", \"diamond\", \"triangle\",\n                         * \"triangle-down\", \"menu\", \"menuball\" or custom shape.\n                         *\n                         * @sample highcharts/exporting/buttons-contextbutton-symbol/\n                         *         Use a circle for symbol\n                         * @sample highcharts/exporting/buttons-contextbutton-symbol-custom/\n                         *         Custom shape as symbol\n                         *\n                         * @type  {Highcharts.SymbolKeyValue|\"menu\"|\"menuball\"|string}\n                         * @since 2.0\n                         */\n                        symbol: 'menu',\n                        /**\n                         * The key to a [lang](#lang) option setting that is used for the\n                         * button's title tooltip. When the key is `contextButtonTitle`, it\n                         * refers to [lang.contextButtonTitle](#lang.contextButtonTitle)\n                         * that defaults to \"Chart context menu\".\n                         *\n                         * @since 6.1.4\n                         */\n                        titleKey: 'contextButtonTitle',\n                        /**\n                         * This option is deprecated, use\n                         * [titleKey](#exporting.buttons.contextButton.titleKey) instead.\n                         *\n                         * @deprecated\n                         * @type      {string}\n                         * @apioption exporting.buttons.contextButton._titleKey\n                         */\n                        /**\n                         * A collection of strings pointing to config options for the menu\n                         * items. The config options are defined in the\n                         * `menuItemDefinitions` option.\n                         *\n                         * By default, there is the \"View in full screen\" and \"Print\" menu\n                         * items, plus one menu item for each of the available export types.\n                         *\n                         * @sample {highcharts} highcharts/exporting/menuitemdefinitions/\n                         *         Menu item definitions\n                         * @sample {highstock} highcharts/exporting/menuitemdefinitions/\n                         *         Menu item definitions\n                         * @sample {highmaps} highcharts/exporting/menuitemdefinitions/\n                         *         Menu item definitions\n                         *\n                         * @type    {Array<string>}\n                         * @default [\"viewFullscreen\", \"printChart\", \"separator\", \"downloadPNG\", \"downloadJPEG\", \"downloadPDF\", \"downloadSVG\"]\n                         * @since   2.0\n                         */\n                        menuItems: [\n                            'viewFullscreen',\n                            'printChart',\n                            'separator',\n                            'downloadPNG',\n                            'downloadJPEG',\n                            'downloadPDF',\n                            'downloadSVG'\n                        ]\n                    }\n                },\n                /**\n                 * An object consisting of definitions for the menu items in the context\n                 * menu. Each key value pair has a `key` that is referenced in the\n                 * [menuItems](#exporting.buttons.contextButton.menuItems) setting,\n                 * and a `value`, which is an object with the following properties:\n                 *\n                 * - **onclick:** The click handler for the menu item\n                 *\n                 * - **text:** The text for the menu item\n                 *\n                 * - **textKey:** If internationalization is required, the key to a language\n                 *   string\n                 *\n                 * Custom text for the \"exitFullScreen\" can be set only in lang options\n                 * (it is not a separate button).\n                 *\n                 * @sample {highcharts} highcharts/exporting/menuitemdefinitions/\n                 *         Menu item definitions\n                 * @sample {highstock} highcharts/exporting/menuitemdefinitions/\n                 *         Menu item definitions\n                 * @sample {highmaps} highcharts/exporting/menuitemdefinitions/\n                 *         Menu item definitions\n                 *\n                 *\n                 * @type    {Highcharts.Dictionary<Highcharts.ExportingMenuObject>}\n                 * @default {\"viewFullscreen\": {}, \"printChart\": {}, \"separator\": {}, \"downloadPNG\": {}, \"downloadJPEG\": {}, \"downloadPDF\": {}, \"downloadSVG\": {}}\n                 * @since   5.0.13\n                 */\n                menuItemDefinitions: {\n                    /**\n                     * @ignore\n                     */\n                    viewFullscreen: {\n                        textKey: 'viewFullscreen',\n                        onclick: function () {\n                            this.fullscreen.toggle();\n                    }\n                },\n                /**\n                 * @ignore\n                 */\n                printChart: {\n                    textKey: 'printChart',\n                    onclick: function () {\n                        this.print();\n                    }\n                },\n                /**\n                 * @ignore\n                 */\n                separator: {\n                    separator: true\n                },\n                /**\n                 * @ignore\n                 */\n                downloadPNG: {\n                    textKey: 'downloadPNG',\n                    onclick: function () {\n                        this.exportChart();\n                    }\n                },\n                /**\n                 * @ignore\n                 */\n                downloadJPEG: {\n                    textKey: 'downloadJPEG',\n                    onclick: function () {\n                        this.exportChart({\n                            type: 'image/jpeg'\n                        });\n                    }\n                },\n                /**\n                 * @ignore\n                 */\n                downloadPDF: {\n                    textKey: 'downloadPDF',\n                    onclick: function () {\n                        this.exportChart({\n                            type: 'application/pdf'\n                        });\n                    }\n                },\n                /**\n                 * @ignore\n                 */\n                downloadSVG: {\n                    textKey: 'downloadSVG',\n                    onclick: function () {\n                        this.exportChart({\n                            type: 'image/svg+xml'\n                        });\n                    }\n                }\n            }\n        };\n        // Add language\n        /**\n         * @optionparent lang\n         */\n        var lang = {\n                /**\n                 * Exporting module only. The text for the menu item to view the chart\n                 * in full screen.\n                 *\n                 * @since 8.0.1\n                 *\n                 * @private\n                 */\n                viewFullscreen: 'View in full screen',\n                /**\n                 * Exporting module only. The text for the menu item to exit the chart\n                 * from full screen.\n                 *\n                 * @since 8.0.1\n                 *\n                 * @private\n                 */\n                exitFullscreen: 'Exit from full screen',\n                /**\n                 * Exporting module only. The text for the menu item to print the chart.\n                 *\n                 * @since    3.0.1\n                 * @requires modules/exporting\n                 *\n                 * @private\n                 */\n                printChart: 'Print chart',\n                /**\n                 * Exporting module only. The text for the PNG download menu item.\n                 *\n                 * @since    2.0\n                 * @requires modules/exporting\n                 *\n                 * @private\n                 */\n                downloadPNG: 'Download PNG image',\n                /**\n                 * Exporting module only. The text for the JPEG download menu item.\n                 *\n                 * @since    2.0\n                 * @requires modules/exporting\n                 *\n                 * @private\n                 */\n                downloadJPEG: 'Download JPEG image',\n                /**\n                 * Exporting module only. The text for the PDF download menu item.\n                 *\n                 * @since    2.0\n                 * @requires modules/exporting\n                 *\n                 * @private\n                 */\n                downloadPDF: 'Download PDF document',\n                /**\n                 * Exporting module only. The text for the SVG download menu item.\n                 *\n                 * @since    2.0\n                 * @requires modules/exporting\n                 *\n                 * @private\n                 */\n                downloadSVG: 'Download SVG vector image',\n                /**\n                 * Exporting module menu. The tooltip title for the context menu holding\n                 * print and export menu items.\n                 *\n                 * @since    3.0\n                 * @requires modules/exporting\n                 *\n                 * @private\n                 */\n                contextButtonTitle: 'Chart context menu'\n            };\n        var navigation = {\n                /**\n                 * A collection of options for buttons appearing in the exporting\n                 * module.\n                 *\n                 * In styled mode, the buttons are styled with the\n                 * `.highcharts-contextbutton` and `.highcharts-button-symbol` classes.\n                 *\n                 * @requires modules/exporting\n                 *\n                 * @private\n                 */\n                buttonOptions: {\n                    /**\n                     * Whether to enable buttons.\n                     *\n                     * @sample highcharts/navigation/buttonoptions-enabled/\n                     *         Exporting module loaded but buttons disabled\n                     *\n                     * @type      {boolean}\n                     * @default   true\n                     * @since     2.0\n                     * @apioption navigation.buttonOptions.enabled\n                     */\n                    /**\n                     * The pixel size of the symbol on the button.\n                     *\n                     * @sample highcharts/navigation/buttonoptions-height/\n                     *         Bigger buttons\n                     *\n                     * @since 2.0\n                     */\n                    symbolSize: 14,\n                    /**\n                     * The x position of the center of the symbol inside the button.\n                     *\n                     * @sample highcharts/navigation/buttonoptions-height/\n                     *         Bigger buttons\n                     *\n                     * @since 2.0\n                     */\n                    symbolX: 12.5,\n                    /**\n                     * The y position of the center of the symbol inside the button.\n                     *\n                     * @sample highcharts/navigation/buttonoptions-height/\n                     *         Bigger buttons\n                     *\n                     * @since 2.0\n                     */\n                    symbolY: 10.5,\n                    /**\n                     * Alignment for the buttons.\n                     *\n                     * @sample highcharts/navigation/buttonoptions-align/\n                     *         Center aligned\n                     *\n                     * @type  {Highcharts.AlignValue}\n                     * @since 2.0\n                     */\n                    align: 'right',\n                    /**\n                     * The pixel spacing between buttons.\n                     *\n                     * @since 2.0\n                     */\n                    buttonSpacing: 3,\n                    /**\n                     * Pixel height of the buttons.\n                     *\n                     * @sample highcharts/navigation/buttonoptions-height/\n                     *         Bigger buttons\n                     *\n                     * @since 2.0\n                     */\n                    height: 22,\n                    /**\n                     * A text string to add to the individual button.\n                     *\n                     * @sample highcharts/exporting/buttons-text/\n                     *         Full text button\n                     * @sample highcharts/exporting/buttons-text-symbol/\n                     *         Combined symbol and text\n                     *\n                     * @type      {string}\n                     * @default   null\n                     * @since     3.0\n                     * @apioption navigation.buttonOptions.text\n                     */\n                    /**\n                     * The vertical offset of the button's position relative to its\n                     * `verticalAlign`.\n                     *\n                     * @sample highcharts/navigation/buttonoptions-verticalalign/\n                     *         Buttons at lower right\n                     *\n                     * @type      {number}\n                     * @default   0\n                     * @since     2.0\n                     * @apioption navigation.buttonOptions.y\n                     */\n                    /**\n                     * The vertical alignment of the buttons. Can be one of `\"top\"`,\n                     * `\"middle\"` or `\"bottom\"`.\n                     *\n                     * @sample highcharts/navigation/buttonoptions-verticalalign/\n                     *         Buttons at lower right\n                     *\n                     * @type  {Highcharts.VerticalAlignValue}\n                     * @since 2.0\n                     */\n                    verticalAlign: 'top',\n                    /**\n                     * The pixel width of the button.\n                     *\n                     * @sample highcharts/navigation/buttonoptions-height/\n                     *         Bigger buttons\n                     *\n                     * @since 2.0\n                     */\n                    width: 24,\n                    /**\n                     * Fill color for the symbol within the button.\n                     *\n                     * @sample highcharts/navigation/buttonoptions-symbolfill/\n                     *         Blue symbol stroke for one of the buttons\n                     *\n                     * @type  {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                     * @since 2.0\n                     */\n                    symbolFill: \"#666666\" /* Palette.neutralColor60 */,\n                    /**\n                     * The color of the symbol's stroke or line.\n                     *\n                     * @sample highcharts/navigation/buttonoptions-symbolstroke/\n                     *         Blue symbol stroke\n                     *\n                     * @type  {Highcharts.ColorString}\n                     * @since 2.0\n                     */\n                    symbolStroke: \"#666666\" /* Palette.neutralColor60 */,\n                    /**\n                     * The pixel stroke width of the symbol on the button.\n                     *\n                     * @sample highcharts/navigation/buttonoptions-height/\n                     *         Bigger buttons\n                     *\n                     * @since 2.0\n                     */\n                    symbolStrokeWidth: 3,\n                    /**\n                     * A configuration object for the button theme. The object accepts\n                     * SVG properties like `stroke-width`, `stroke` and `fill`.\n                     * Tri-state button styles are supported by the `states.hover` and\n                     * `states.select` objects.\n                     *\n                     * @sample highcharts/navigation/buttonoptions-theme/\n                     *         Theming the buttons\n                     *\n                     * @requires modules/exporting\n                     *\n                     * @since 3.0\n                     */\n                    theme: {\n                        /**\n                         * The default fill exists only to capture hover events.\n                         *\n                         * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n                         * @default   #ffffff\n                         * @apioption navigation.buttonOptions.theme.fill\n                         */\n                        /**\n                         * Default stroke for the buttons.\n                         * @type      {Highcharts.ColorString}\n                         * @default   none\n                         * @apioption navigation.buttonOptions.theme.stroke\n                         */\n                        /**\n                         * Padding for the button.\n                         */\n                        padding: 5\n                    }\n                },\n                /**\n                 * CSS styles for the popup menu appearing by default when the export\n                 * icon is clicked. This menu is rendered in HTML.\n                 *\n                 * @see In styled mode, the menu is styled with the `.highcharts-menu`\n                 *      class.\n                 *\n                 * @sample highcharts/navigation/menustyle/\n                 *         Light gray menu background\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"border\": \"1px solid #999999\", \"background\": \"#ffffff\", \"padding\": \"5px 0\"}\n                 * @since   2.0\n                 *\n                 * @private\n                 */\n                menuStyle: {\n                    /** @ignore-option */\n                    border: \"1px solid \".concat(\"#999999\" /* Palette.neutralColor40 */),\n                    /** @ignore-option */\n                    background: \"#ffffff\" /* Palette.backgroundColor */,\n                    /** @ignore-option */\n                    padding: '5px 0'\n                },\n                /**\n                 * CSS styles for the individual items within the popup menu appearing\n                 * by default when the export icon is clicked. The menu items are\n                 * rendered in HTML. Font size defaults to `11px` on desktop and `14px`\n                 * on touch devices.\n                 *\n                 * @see In styled mode, the menu items are styled with the\n                 *      `.highcharts-menu-item` class.\n                 *\n                 * @sample {highcharts} highcharts/navigation/menuitemstyle/\n                 *         Add a grey stripe to the left\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"padding\": \"0.5em 1em\", \"color\": \"#333333\", \"background\": \"none\", \"fontSize\": \"11px/14px\", \"transition\": \"background 250ms, color 250ms\"}\n                 * @since   2.0\n                 *\n                 * @private\n                 */\n                menuItemStyle: {\n                    /** @ignore-option */\n                    padding: '0.5em 1em',\n                    /** @ignore-option */\n                    color: \"#333333\" /* Palette.neutralColor80 */,\n                    /** @ignore-option */\n                    background: 'none',\n                    /** @ignore-option */\n                    fontSize: isTouchDevice ? '14px' : '11px',\n                    /** @ignore-option */\n                    transition: 'background 250ms, color 250ms'\n                },\n                /**\n                 * CSS styles for the hover state of the individual items within the\n                 * popup menu appearing by default when the export icon is clicked. The\n                 * menu items are rendered in HTML.\n                 *\n                 * @see In styled mode, the menu items are styled with the\n                 *      `.highcharts-menu-item` class.\n                 *\n                 * @sample highcharts/navigation/menuitemhoverstyle/\n                 *         Bold text on hover\n                 *\n                 * @type    {Highcharts.CSSObject}\n                 * @default {\"background\": \"#335cad\", \"color\": \"#ffffff\"}\n                 * @since   2.0\n                 *\n                 * @private\n                 */\n                menuItemHoverStyle: {\n                    /** @ignore-option */\n                    background: \"#335cad\" /* Palette.highlightColor80 */,\n                    /** @ignore-option */\n                    color: \"#ffffff\" /* Palette.backgroundColor */\n                }\n            };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var ExportingDefaults = {\n                exporting: exporting,\n                lang: lang,\n                navigation: navigation\n            };\n\n        return ExportingDefaults;\n    });\n    _registerModule(_modules, 'Extensions/Exporting/ExportingSymbols.js', [], function () {\n        /* *\n         *\n         *  Exporting module\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var ExportingSymbols;\n        (function (ExportingSymbols) {\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            var modifiedClasses = [];\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * @private\n             */\n            function compose(SVGRendererClass) {\n                if (modifiedClasses.indexOf(SVGRendererClass) === -1) {\n                    modifiedClasses.push(SVGRendererClass);\n                    var symbols = SVGRendererClass.prototype.symbols;\n                    symbols.menu = menu;\n                    symbols.menuball = menuball.bind(symbols);\n                }\n            }\n            ExportingSymbols.compose = compose;\n            /**\n             * @private\n             */\n            function menu(x, y, width, height) {\n                var arr = [\n                        ['M',\n                    x,\n                    y + 2.5],\n                        ['L',\n                    x + width,\n                    y + 2.5],\n                        ['M',\n                    x,\n                    y + height / 2 + 0.5],\n                        ['L',\n                    x + width,\n                    y + height / 2 + 0.5],\n                        ['M',\n                    x,\n                    y + height - 1.5],\n                        ['L',\n                    x + width,\n                    y + height - 1.5]\n                    ];\n                return arr;\n            }\n            /**\n             * @private\n             */\n            function menuball(x, y, width, height) {\n                var h = (height / 3) - 2;\n                var path = [];\n                path = path.concat(this.circle(width - h, y, h, h), this.circle(width - h, y + h + 4, h, h), this.circle(width - h, y + 2 * (h + 4), h, h));\n                return path;\n            }\n        })(ExportingSymbols || (ExportingSymbols = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ExportingSymbols;\n    });\n    _registerModule(_modules, 'Core/HttpUtilities.js', [_modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (G, U) {\n        /* *\n         *\n         *  (c) 2010-2021 Christer Vasseng, Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var doc = G.doc;\n        var createElement = U.createElement,\n            discardElement = U.discardElement,\n            merge = U.merge,\n            objectEach = U.objectEach;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Perform an Ajax call.\n         *\n         * @function Highcharts.ajax\n         *\n         * @param {Highcharts.AjaxSettingsObject} settings\n         *        The Ajax settings to use.\n         *\n         * @return {false|undefined}\n         *         Returns false, if error occured.\n         */\n        function ajax(settings) {\n            var headers = {\n                    json: 'application/json',\n                    xml: 'application/xml',\n                    text: 'text/plain',\n                    octet: 'application/octet-stream'\n                },\n                r = new XMLHttpRequest();\n            /**\n             * Private error handler.\n             * @private\n             * @param {XMLHttpRequest} xhr\n             * Internal request object.\n             * @param {string|Error} err\n             * Occured error.\n             */\n            function handleError(xhr, err) {\n                if (settings.error) {\n                    settings.error(xhr, err);\n                }\n                else {\n                    // @todo Maybe emit a highcharts error event here\n                }\n            }\n            if (!settings.url) {\n                return false;\n            }\n            r.open((settings.type || 'get').toUpperCase(), settings.url, true);\n            if (!settings.headers || !settings.headers['Content-Type']) {\n                r.setRequestHeader('Content-Type', headers[settings.dataType || 'json'] || headers.text);\n            }\n            objectEach(settings.headers, function (val, key) {\n                r.setRequestHeader(key, val);\n            });\n            if (settings.responseType) {\n                r.responseType = settings.responseType;\n            }\n            // @todo lacking timeout handling\n            r.onreadystatechange = function () {\n                var res;\n                if (r.readyState === 4) {\n                    if (r.status === 200) {\n                        if (settings.responseType !== 'blob') {\n                            res = r.responseText;\n                            if (settings.dataType === 'json') {\n                                try {\n                                    res = JSON.parse(res);\n                                }\n                                catch (e) {\n                                    if (e instanceof Error) {\n                                        return handleError(r, e);\n                                    }\n                                }\n                            }\n                        }\n                        return settings.success && settings.success(res, r);\n                    }\n                    handleError(r, r.responseText);\n                }\n            };\n            if (settings.data && typeof settings.data !== 'string') {\n                settings.data = JSON.stringify(settings.data);\n            }\n            r.send(settings.data);\n        }\n        /**\n         * Get a JSON resource over XHR, also supporting CORS without preflight.\n         *\n         * @function Highcharts.getJSON\n         * @param {string} url\n         *        The URL to load.\n         * @param {Function} success\n         *        The success callback. For error handling, use the `Highcharts.ajax`\n         *        function instead.\n         */\n        function getJSON(url, success) {\n            HttpUtilities.ajax({\n                url: url,\n                success: success,\n                dataType: 'json',\n                headers: {\n                    // Override the Content-Type to avoid preflight problems with CORS\n                    // in the Highcharts demos\n                    'Content-Type': 'text/plain'\n                }\n            });\n        }\n        /**\n         * The post utility\n         *\n         * @private\n         * @function Highcharts.post\n         *\n         * @param {string} url\n         * Post URL\n         *\n         * @param {Object} data\n         * Post data\n         *\n         * @param {Highcharts.Dictionary<string>} [formAttributes]\n         * Additional attributes for the post request\n         */\n        function post(url, data, formAttributes) {\n            // create the form\n            var form = createElement('form',\n                merge({\n                    method: 'post',\n                    action: url,\n                    enctype: 'multipart/form-data'\n                },\n                formAttributes), {\n                    display: 'none'\n                },\n                doc.body);\n            // add the data\n            objectEach(data, function (val, name) {\n                createElement('input', {\n                    type: 'hidden',\n                    name: name,\n                    value: val\n                }, void 0, form);\n            });\n            // submit\n            form.submit();\n            // clean up\n            discardElement(form);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        var HttpUtilities = {\n                ajax: ajax,\n                getJSON: getJSON,\n                post: post\n            };\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * @interface Highcharts.AjaxSettingsObject\n         */ /**\n        * The payload to send.\n        *\n        * @name Highcharts.AjaxSettingsObject#data\n        * @type {string|Highcharts.Dictionary<any>|undefined}\n        */ /**\n        * The data type expected.\n        * @name Highcharts.AjaxSettingsObject#dataType\n        * @type {\"json\"|\"xml\"|\"text\"|\"octet\"|undefined}\n        */ /**\n        * Function to call on error.\n        * @name Highcharts.AjaxSettingsObject#error\n        * @type {Function|undefined}\n        */ /**\n        * The headers; keyed on header name.\n        * @name Highcharts.AjaxSettingsObject#headers\n        * @type {Highcharts.Dictionary<string>|undefined}\n        */ /**\n        * Function to call on success.\n        * @name Highcharts.AjaxSettingsObject#success\n        * @type {Function|undefined}\n        */ /**\n        * The HTTP method to use. For example GET or POST.\n        * @name Highcharts.AjaxSettingsObject#type\n        * @type {string|undefined}\n        */ /**\n        * The URL to call.\n        * @name Highcharts.AjaxSettingsObject#url\n        * @type {string}\n        */\n        (''); // keeps doclets above in JS file\n\n        return HttpUtilities;\n    });\n    _registerModule(_modules, 'Extensions/Exporting/Exporting.js', [_modules['Core/Renderer/HTML/AST.js'], _modules['Core/Chart/Chart.js'], _modules['Core/Chart/ChartNavigationComposition.js'], _modules['Core/DefaultOptions.js'], _modules['Extensions/Exporting/ExportingDefaults.js'], _modules['Extensions/Exporting/ExportingSymbols.js'], _modules['Core/Globals.js'], _modules['Core/HttpUtilities.js'], _modules['Core/Utilities.js']], function (AST, Chart, ChartNavigationComposition, D, ExportingDefaults, ExportingSymbols, G, HU, U) {\n        /* *\n         *\n         *  Exporting module\n         *\n         *  (c) 2010-2021 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        var defaultOptions = D.defaultOptions;\n        var doc = G.doc,\n            SVG_NS = G.SVG_NS,\n            win = G.win;\n        var addEvent = U.addEvent,\n            css = U.css,\n            createElement = U.createElement,\n            discardElement = U.discardElement,\n            extend = U.extend,\n            find = U.find,\n            fireEvent = U.fireEvent,\n            isObject = U.isObject,\n            merge = U.merge,\n            objectEach = U.objectEach,\n            pick = U.pick,\n            removeEvent = U.removeEvent,\n            uniqueKey = U.uniqueKey;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var Exporting;\n        (function (Exporting) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            var composedClasses = [];\n            // These CSS properties are not inlined. Remember camelCase.\n            var inlineBlacklist = [\n                    /-/,\n                    /^(clipPath|cssText|d|height|width)$/,\n                    /^font$/,\n                    /[lL]ogical(Width|Height)$/,\n                    /perspective/,\n                    /TapHighlightColor/,\n                    /^transition/,\n                    /^length$/ // #7700\n                    // /^text (border|color|cursor|height|webkitBorder)/\n                ];\n            // These ones are translated to attributes rather than styles\n            var inlineToAttributes = [\n                    'fill',\n                    'stroke',\n                    'strokeLinecap',\n                    'strokeLinejoin',\n                    'strokeWidth',\n                    'textAnchor',\n                    'x',\n                    'y'\n                ];\n            Exporting.inlineWhitelist = [];\n            var unstyledElements = [\n                    'clipPath',\n                    'defs',\n                    'desc'\n                ];\n            /* *\n             *\n             *  Variables\n             *\n             * */\n            var printingChart;\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            /**\n             * Add the export button to the chart, with options.\n             *\n             * @private\n             * @function Highcharts.Chart#addButton\n             * @param {Highcharts.NavigationButtonOptions} options\n             * @requires modules/exporting\n             */\n            function addButton(options) {\n                var chart = this,\n                    renderer = chart.renderer,\n                    btnOptions = merge(chart.options.navigation.buttonOptions,\n                    options),\n                    onclick = btnOptions.onclick,\n                    menuItems = btnOptions.menuItems,\n                    symbolSize = btnOptions.symbolSize || 12;\n                var symbol;\n                if (!chart.btnCount) {\n                    chart.btnCount = 0;\n                }\n                // Keeps references to the button elements\n                if (!chart.exportDivElements) {\n                    chart.exportDivElements = [];\n                    chart.exportSVGElements = [];\n                }\n                if (btnOptions.enabled === false || !btnOptions.theme) {\n                    return;\n                }\n                var attr = btnOptions.theme;\n                var callback;\n                if (!chart.styledMode) {\n                    attr.fill = pick(attr.fill, \"#ffffff\" /* Palette.backgroundColor */);\n                    attr.stroke = pick(attr.stroke, 'none');\n                }\n                if (onclick) {\n                    callback = function (e) {\n                        if (e) {\n                            e.stopPropagation();\n                        }\n                        onclick.call(chart, e);\n                    };\n                }\n                else if (menuItems) {\n                    callback = function (e) {\n                        // consistent with onclick call (#3495)\n                        if (e) {\n                            e.stopPropagation();\n                        }\n                        chart.contextMenu(button.menuClassName, menuItems, button.translateX, button.translateY, button.width, button.height, button);\n                        button.setState(2);\n                    };\n                }\n                if (btnOptions.text && btnOptions.symbol) {\n                    attr.paddingLeft = pick(attr.paddingLeft, 30);\n                }\n                else if (!btnOptions.text) {\n                    extend(attr, {\n                        width: btnOptions.width,\n                        height: btnOptions.height,\n                        padding: 0\n                    });\n                }\n                if (!chart.styledMode) {\n                    attr['stroke-linecap'] = 'round';\n                    attr.fill = pick(attr.fill, \"#ffffff\" /* Palette.backgroundColor */);\n                    attr.stroke = pick(attr.stroke, 'none');\n                }\n                var button = renderer\n                        .button(btnOptions.text, 0, 0,\n                    callback,\n                    attr)\n                        .addClass(options.className)\n                        .attr({\n                        title: pick(chart.options.lang[btnOptions._titleKey || btnOptions.titleKey], '')\n                    });\n                button.menuClassName = (options.menuClassName ||\n                    'highcharts-menu-' + chart.btnCount++);\n                if (btnOptions.symbol) {\n                    symbol = renderer\n                        .symbol(btnOptions.symbol, btnOptions.symbolX - (symbolSize / 2), btnOptions.symbolY - (symbolSize / 2), symbolSize, symbolSize\n                    // If symbol is an image, scale it (#7957)\n                    , {\n                        width: symbolSize,\n                        height: symbolSize\n                    })\n                        .addClass('highcharts-button-symbol')\n                        .attr({\n                        zIndex: 1\n                    })\n                        .add(button);\n                    if (!chart.styledMode) {\n                        symbol.attr({\n                            stroke: btnOptions.symbolStroke,\n                            fill: btnOptions.symbolFill,\n                            'stroke-width': btnOptions.symbolStrokeWidth || 1\n                        });\n                    }\n                }\n                button\n                    .add(chart.exportingGroup)\n                    .align(extend(btnOptions, {\n                    width: button.width,\n                    x: pick(btnOptions.x, chart.buttonOffset) // #1654\n                }), true, 'spacingBox');\n                chart.buttonOffset += ((button.width + btnOptions.buttonSpacing) *\n                    (btnOptions.align === 'right' ? -1 : 1));\n                chart.exportSVGElements.push(button, symbol);\n            }\n            /**\n             * Clena up after printing a chart.\n             *\n             * @function Highcharts#afterPrint\n             *\n             * @private\n             *\n             * @param {Highcharts.Chart} chart\n             *        Chart that was (or suppose to be) printed\n             *\n             * @emits Highcharts.Chart#event:afterPrint\n             */\n            function afterPrint() {\n                var chart = this;\n                if (!chart.printReverseInfo) {\n                    return void 0;\n                }\n                var _a = chart.printReverseInfo,\n                    childNodes = _a.childNodes,\n                    origDisplay = _a.origDisplay,\n                    resetParams = _a.resetParams;\n                // put the chart back in\n                chart.moveContainers(chart.renderTo);\n                // restore all body content\n                [].forEach.call(childNodes, function (node, i) {\n                    if (node.nodeType === 1) {\n                        node.style.display = (origDisplay[i] || '');\n                    }\n                });\n                chart.isPrinting = false;\n                // Reset printMaxWidth\n                if (resetParams) {\n                    chart.setSize.apply(chart, resetParams);\n                }\n                delete chart.printReverseInfo;\n                printingChart = void 0;\n                fireEvent(chart, 'afterPrint');\n            }\n            /**\n             * Prepare chart and document before printing a chart.\n             *\n             * @function Highcharts#beforePrint\n             *\n             * @private\n             *\n             *\n             * @emits Highcharts.Chart#event:beforePrint\n             */\n            function beforePrint() {\n                var chart = this,\n                    body = doc.body,\n                    printMaxWidth = chart.options.exporting.printMaxWidth,\n                    printReverseInfo = {\n                        childNodes: body.childNodes,\n                        origDisplay: [],\n                        resetParams: void 0\n                    };\n                chart.isPrinting = true;\n                chart.pointer.reset(null, 0);\n                fireEvent(chart, 'beforePrint');\n                // Handle printMaxWidth\n                var handleMaxWidth = printMaxWidth &&\n                        chart.chartWidth > printMaxWidth;\n                if (handleMaxWidth) {\n                    printReverseInfo.resetParams = [\n                        chart.options.chart.width,\n                        void 0,\n                        false\n                    ];\n                    chart.setSize(printMaxWidth, void 0, false);\n                }\n                // hide all body content\n                [].forEach.call(printReverseInfo.childNodes, function (node, i) {\n                    if (node.nodeType === 1) {\n                        printReverseInfo.origDisplay[i] = node.style.display;\n                        node.style.display = 'none';\n                    }\n                });\n                // pull out the chart\n                chart.moveContainers(body);\n                // Storage details for undo action after printing\n                chart.printReverseInfo = printReverseInfo;\n            }\n            /**\n             * @private\n             */\n            function chartCallback(chart) {\n                var composition = chart;\n                composition.renderExporting();\n                addEvent(chart, 'redraw', composition.renderExporting);\n                // Destroy the export elements at chart destroy\n                addEvent(chart, 'destroy', composition.destroyExport);\n                // Uncomment this to see a button directly below the chart, for quick\n                // testing of export\n                /*\n                let button, viewImage, viewSource;\n                if (!chart.renderer.forExport) {\n                    viewImage = function () {\n                        let div = doc.createElement('div');\n                        div.innerHTML = chart.getSVGForExport();\n                        chart.renderTo.parentNode.appendChild(div);\n                    };\n\n                    viewSource = function () {\n                        let pre = doc.createElement('pre');\n                        pre.innerHTML = chart.getSVGForExport()\n                            .replace(/</g, '\\n&lt;')\n                            .replace(/>/g, '&gt;');\n                        chart.renderTo.parentNode.appendChild(pre);\n                    };\n\n                    viewImage();\n\n                    // View SVG Image\n                    button = doc.createElement('button');\n                    button.innerHTML = 'View SVG Image';\n                    chart.renderTo.parentNode.appendChild(button);\n                    button.onclick = viewImage;\n\n                    // View SVG Source\n                    button = doc.createElement('button');\n                    button.innerHTML = 'View SVG Source';\n                    chart.renderTo.parentNode.appendChild(button);\n                    button.onclick = viewSource;\n                }\n                //*/\n            }\n            /**\n             * @private\n             */\n            function compose(ChartClass, SVGRendererClass) {\n                ExportingSymbols.compose(SVGRendererClass);\n                if (composedClasses.indexOf(ChartClass) === -1) {\n                    composedClasses.push(ChartClass);\n                    var chartProto = ChartClass.prototype;\n                    chartProto.afterPrint = afterPrint;\n                    chartProto.exportChart = exportChart;\n                    chartProto.inlineStyles = inlineStyles;\n                    chartProto.print = print;\n                    chartProto.sanitizeSVG = sanitizeSVG;\n                    chartProto.getChartHTML = getChartHTML;\n                    chartProto.getSVG = getSVG;\n                    chartProto.getSVGForExport = getSVGForExport;\n                    chartProto.getFilename = getFilename;\n                    chartProto.moveContainers = moveContainers;\n                    chartProto.beforePrint = beforePrint;\n                    chartProto.contextMenu = contextMenu;\n                    chartProto.addButton = addButton;\n                    chartProto.destroyExport = destroyExport;\n                    chartProto.renderExporting = renderExporting;\n                    chartProto.callbacks.push(chartCallback);\n                    addEvent(ChartClass, 'init', onChartInit);\n                    if (G.isSafari) {\n                        G.win.matchMedia('print').addListener(function (mqlEvent) {\n                            if (!printingChart) {\n                                return void 0;\n                            }\n                            if (mqlEvent.matches) {\n                                printingChart.beforePrint();\n                            }\n                            else {\n                                printingChart.afterPrint();\n                            }\n                        });\n                    }\n                }\n            }\n            Exporting.compose = compose;\n            /**\n             * Display a popup menu for choosing the export type.\n             *\n             * @private\n             * @function Highcharts.Chart#contextMenu\n             * @param {string} className\n             *        An identifier for the menu.\n             * @param {Array<string|Highcharts.ExportingMenuObject>} items\n             *        A collection with text and onclicks for the items.\n             * @param {number} x\n             *        The x position of the opener button\n             * @param {number} y\n             *        The y position of the opener button\n             * @param {number} width\n             *        The width of the opener button\n             * @param {number} height\n             *        The height of the opener button\n             * @requires modules/exporting\n             */\n            function contextMenu(className, items, x, y, width, height, button) {\n                var chart = this,\n                    navOptions = chart.options.navigation,\n                    chartWidth = chart.chartWidth,\n                    chartHeight = chart.chartHeight,\n                    cacheName = 'cache-' + className,\n                    menuPadding = Math.max(width,\n                    height); // for mouse leave detection\n                    var innerMenu,\n                    menu = chart[cacheName];\n                // create the menu only the first time\n                if (!menu) {\n                    // create a HTML element above the SVG\n                    chart.exportContextMenu = chart[cacheName] = menu =\n                        createElement('div', {\n                            className: className\n                        }, {\n                            position: 'absolute',\n                            zIndex: 1000,\n                            padding: menuPadding + 'px',\n                            pointerEvents: 'auto'\n                        }, chart.fixedDiv || chart.container);\n                    innerMenu = createElement('ul', { className: 'highcharts-menu' }, {\n                        listStyle: 'none',\n                        margin: 0,\n                        padding: 0\n                    }, menu);\n                    // Presentational CSS\n                    if (!chart.styledMode) {\n                        css(innerMenu, extend({\n                            MozBoxShadow: '3px 3px 10px #888',\n                            WebkitBoxShadow: '3px 3px 10px #888',\n                            boxShadow: '3px 3px 10px #888'\n                        }, navOptions.menuStyle));\n                    }\n                    // hide on mouse out\n                    menu.hideMenu = function () {\n                        css(menu, { display: 'none' });\n                        if (button) {\n                            button.setState(0);\n                        }\n                        chart.openMenu = false;\n                        // #10361, #9998\n                        css(chart.renderTo, { overflow: 'hidden' });\n                        css(chart.container, { overflow: 'hidden' });\n                        U.clearTimeout(menu.hideTimer);\n                        fireEvent(chart, 'exportMenuHidden');\n                    };\n                    // Hide the menu some time after mouse leave (#1357)\n                    chart.exportEvents.push(addEvent(menu, 'mouseleave', function () {\n                        menu.hideTimer = win.setTimeout(menu.hideMenu, 500);\n                    }), addEvent(menu, 'mouseenter', function () {\n                        U.clearTimeout(menu.hideTimer);\n                    }), \n                    // Hide it on clicking or touching outside the menu (#2258,\n                    // #2335, #2407)\n                    addEvent(doc, 'mouseup', function (e) {\n                        if (!chart.pointer.inClass(e.target, className)) {\n                            menu.hideMenu();\n                        }\n                    }), addEvent(menu, 'click', function () {\n                        if (chart.openMenu) {\n                            menu.hideMenu();\n                        }\n                    }));\n                    // create the items\n                    items.forEach(function (item) {\n                        if (typeof item === 'string') {\n                            item = chart.options.exporting\n                                .menuItemDefinitions[item];\n                        }\n                        if (isObject(item, true)) {\n                            var element = void 0;\n                            if (item.separator) {\n                                element = createElement('hr', void 0, void 0, innerMenu);\n                            }\n                            else {\n                                // When chart initialized with the table, wrong button\n                                // text displayed, #14352.\n                                if (item.textKey === 'viewData' &&\n                                    chart.isDataTableVisible) {\n                                    item.textKey = 'hideData';\n                                }\n                                element = createElement('li', {\n                                    className: 'highcharts-menu-item',\n                                    onclick: function (e) {\n                                        if (e) { // IE7\n                                            e.stopPropagation();\n                                        }\n                                        menu.hideMenu();\n                                        if (item.onclick) {\n                                            item.onclick\n                                                .apply(chart, arguments);\n                                        }\n                                    }\n                                }, void 0, innerMenu);\n                                AST.setElementHTML(element, item.text ||\n                                    chart.options.lang[item.textKey]);\n                                if (!chart.styledMode) {\n                                    element.onmouseover = function () {\n                                        css(this, navOptions.menuItemHoverStyle);\n                                    };\n                                    element.onmouseout = function () {\n                                        css(this, navOptions.menuItemStyle);\n                                    };\n                                    css(element, extend({\n                                        cursor: 'pointer'\n                                    }, navOptions.menuItemStyle || {}));\n                                }\n                            }\n                            // Keep references to menu divs to be able to destroy them\n                            chart.exportDivElements.push(element);\n                        }\n                    });\n                    // Keep references to menu and innerMenu div to be able to destroy\n                    // them\n                    chart.exportDivElements.push(innerMenu, menu);\n                    chart.exportMenuWidth = menu.offsetWidth;\n                    chart.exportMenuHeight = menu.offsetHeight;\n                }\n                var menuStyle = { display: 'block' };\n                // if outside right, right align it\n                if (x + chart.exportMenuWidth > chartWidth) {\n                    menuStyle.right = (chartWidth - x - width - menuPadding) + 'px';\n                }\n                else {\n                    menuStyle.left = (x - menuPadding) + 'px';\n                }\n                // if outside bottom, bottom align it\n                if (y + height + chart.exportMenuHeight > chartHeight &&\n                    button.alignOptions.verticalAlign !== 'top') {\n                    menuStyle.bottom = (chartHeight - y - menuPadding) + 'px';\n                }\n                else {\n                    menuStyle.top = (y + height - menuPadding) + 'px';\n                }\n                css(menu, menuStyle);\n                // #10361, #9998\n                css(chart.renderTo, { overflow: '' });\n                css(chart.container, { overflow: '' });\n                chart.openMenu = true;\n                fireEvent(chart, 'exportMenuShown');\n            }\n            /**\n             * Destroy the export buttons.\n             * @private\n             * @function Highcharts.Chart#destroyExport\n             * @param {global.Event} [e]\n             * @requires modules/exporting\n             */\n            function destroyExport(e) {\n                var chart = e ? e.target : this,\n                    exportSVGElements = chart.exportSVGElements,\n                    exportDivElements = chart.exportDivElements,\n                    exportEvents = chart.exportEvents;\n                var cacheName;\n                // Destroy the extra buttons added\n                if (exportSVGElements) {\n                    exportSVGElements.forEach(function (elem, i) {\n                        // Destroy and null the svg elements\n                        if (elem) { // #1822\n                            elem.onclick = elem.ontouchstart = null;\n                            cacheName = 'cache-' + elem.menuClassName;\n                            if (chart[cacheName]) {\n                                delete chart[cacheName];\n                            }\n                            exportSVGElements[i] = elem.destroy();\n                        }\n                    });\n                    exportSVGElements.length = 0;\n                }\n                // Destroy the exporting group\n                if (chart.exportingGroup) {\n                    chart.exportingGroup.destroy();\n                    delete chart.exportingGroup;\n                }\n                // Destroy the divs for the menu\n                if (exportDivElements) {\n                    exportDivElements.forEach(function (elem, i) {\n                        if (elem) {\n                            // Remove the event handler\n                            U.clearTimeout(elem.hideTimer); // #5427\n                            removeEvent(elem, 'mouseleave');\n                            // Remove inline events\n                            // (chart.exportDivElements as any)[i] =\n                            exportDivElements[i] =\n                                elem.onmouseout =\n                                    elem.onmouseover =\n                                        elem.ontouchstart =\n                                            elem.onclick = null;\n                            // Destroy the div by moving to garbage bin\n                            discardElement(elem);\n                        }\n                    });\n                    exportDivElements.length = 0;\n                }\n                if (exportEvents) {\n                    exportEvents.forEach(function (unbind) {\n                        unbind();\n                    });\n                    exportEvents.length = 0;\n                }\n            }\n            /**\n             * Exporting module required. Submit an SVG version of the chart to a server\n             * along with some parameters for conversion.\n             *\n             * @sample highcharts/members/chart-exportchart/\n             *         Export with no options\n             * @sample highcharts/members/chart-exportchart-filename/\n             *         PDF type and custom filename\n             * @sample highcharts/members/chart-exportchart-custom-background/\n             *         Different chart background in export\n             * @sample stock/members/chart-exportchart/\n             *         Export with Highcharts Stock\n             *\n             * @function Highcharts.Chart#exportChart\n             *\n             * @param {Highcharts.ExportingOptions} exportingOptions\n             *        Exporting options in addition to those defined in\n             *        [exporting](https://api.highcharts.com/highcharts/exporting).\n             *\n             * @param {Highcharts.Options} chartOptions\n             *        Additional chart options for the exported chart. For example a\n             *        different background color can be added here, or `dataLabels` for\n             *        export only.\n             *\n             * @requires modules/exporting\n             */\n            function exportChart(exportingOptions, chartOptions) {\n                var svg = this.getSVGForExport(exportingOptions,\n                    chartOptions);\n                // merge the options\n                exportingOptions = merge(this.options.exporting, exportingOptions);\n                // do the post\n                HU.post(exportingOptions.url, {\n                    filename: exportingOptions.filename ?\n                        exportingOptions.filename.replace(/\\//g, '-') :\n                        this.getFilename(),\n                    type: exportingOptions.type,\n                    // IE8 fails to post undefined correctly, so use 0\n                    width: exportingOptions.width || 0,\n                    scale: exportingOptions.scale,\n                    svg: svg\n                }, exportingOptions.formAttributes);\n            }\n            /**\n             * Return the unfiltered innerHTML of the chart container. Used as hook for\n             * plugins. In styled mode, it also takes care of inlining CSS style rules.\n             *\n             * @see Chart#getSVG\n             *\n             * @function Highcharts.Chart#getChartHTML\n             *\n             * @return {string}\n             * The unfiltered SVG of the chart.\n             *\n             * @requires modules/exporting\n             */\n            function getChartHTML() {\n                if (this.styledMode) {\n                    this.inlineStyles();\n                }\n                return this.container.innerHTML;\n            }\n            /**\n             * Get the default file name used for exported charts. By default it creates\n             * a file name based on the chart title.\n             *\n             * @function Highcharts.Chart#getFilename\n             *\n             * @return {string} A file name without extension.\n             *\n             * @requires modules/exporting\n             */\n            function getFilename() {\n                var s = this.userOptions.title && this.userOptions.title.text;\n                var filename = this.options.exporting.filename;\n                if (filename) {\n                    return filename.replace(/\\//g, '-');\n                }\n                if (typeof s === 'string') {\n                    filename = s\n                        .toLowerCase()\n                        .replace(/<\\/?[^>]+(>|$)/g, '') // strip HTML tags\n                        .replace(/[\\s_]+/g, '-')\n                        .replace(/[^a-z0-9\\-]/g, '') // preserve only latin\n                        .replace(/^[\\-]+/g, '') // dashes in the start\n                        .replace(/[\\-]+/g, '-') // dashes in a row\n                        .substr(0, 24)\n                        .replace(/[\\-]+$/g, ''); // dashes in the end;\n                }\n                if (!filename || filename.length < 5) {\n                    filename = 'chart';\n                }\n                return filename;\n            }\n            /**\n             * Return an SVG representation of the chart.\n             *\n             * @sample highcharts/members/chart-getsvg/\n             *         View the SVG from a button\n             *\n             * @function Highcharts.Chart#getSVG\n             *\n             * @param {Highcharts.Options} [chartOptions]\n             *        Additional chart options for the generated SVG representation. For\n             *        collections like `xAxis`, `yAxis` or `series`, the additional\n             *        options is either merged in to the original item of the same\n             *        `id`, or to the first item if a common id is not found.\n             *\n             * @return {string}\n             *         The SVG representation of the rendered chart.\n             *\n             * @emits Highcharts.Chart#event:getSVG\n             *\n             * @requires modules/exporting\n             */\n            function getSVG(chartOptions) {\n                var chart = this;\n                var svg,\n                    seriesOptions, \n                    // Copy the options and add extra options\n                    options = merge(chart.options,\n                    chartOptions);\n                // Use userOptions to make the options chain in series right (#3881)\n                options.plotOptions = merge(chart.userOptions.plotOptions, chartOptions && chartOptions.plotOptions);\n                // ... and likewise with time, avoid that undefined time properties are\n                // merged over legacy global time options\n                options.time = merge(chart.userOptions.time, chartOptions && chartOptions.time);\n                // create a sandbox where a new chart will be generated\n                var sandbox = createElement('div',\n                    null, {\n                        position: 'absolute',\n                        top: '-9999em',\n                        width: chart.chartWidth + 'px',\n                        height: chart.chartHeight + 'px'\n                    },\n                    doc.body);\n                // get the source size\n                var cssWidth = chart.renderTo.style.width,\n                    cssHeight = chart.renderTo.style.height,\n                    sourceWidth = options.exporting.sourceWidth ||\n                        options.chart.width ||\n                        (/px$/.test(cssWidth) && parseInt(cssWidth, 10)) ||\n                        (options.isGantt ? 800 : 600),\n                    sourceHeight = options.exporting.sourceHeight ||\n                        options.chart.height ||\n                        (/px$/.test(cssHeight) && parseInt(cssHeight, 10)) ||\n                        400;\n                // override some options\n                extend(options.chart, {\n                    animation: false,\n                    renderTo: sandbox,\n                    forExport: true,\n                    renderer: 'SVGRenderer',\n                    width: sourceWidth,\n                    height: sourceHeight\n                });\n                options.exporting.enabled = false; // hide buttons in print\n                delete options.data; // #3004\n                // prepare for replicating the chart\n                options.series = [];\n                chart.series.forEach(function (serie) {\n                    seriesOptions = merge(serie.userOptions, {\n                        animation: false,\n                        enableMouseTracking: false,\n                        showCheckbox: false,\n                        visible: serie.visible\n                    });\n                    // Used for the navigator series that has its own option set\n                    if (!seriesOptions.isInternal) {\n                        options.series.push(seriesOptions);\n                    }\n                });\n                var colls = {};\n                chart.axes.forEach(function (axis) {\n                    // Assign an internal key to ensure a one-to-one mapping (#5924)\n                    if (!axis.userOptions.internalKey) { // #6444\n                        axis.userOptions.internalKey = uniqueKey();\n                    }\n                    if (!axis.options.isInternal) {\n                        if (!colls[axis.coll]) {\n                            colls[axis.coll] = true;\n                            options[axis.coll] = [];\n                        }\n                        options[axis.coll].push(merge(axis.userOptions, {\n                            visible: axis.visible\n                        }));\n                    }\n                });\n                // Generate the chart copy\n                var chartCopy = new chart.constructor(options,\n                    chart.callback);\n                // Axis options and series options  (#2022, #3900, #5982)\n                if (chartOptions) {\n                    ['xAxis', 'yAxis', 'series'].forEach(function (coll) {\n                        var collOptions = {};\n                        if (chartOptions[coll]) {\n                            collOptions[coll] = chartOptions[coll];\n                            chartCopy.update(collOptions);\n                        }\n                    });\n                }\n                // Reflect axis extremes in the export (#5924)\n                chart.axes.forEach(function (axis) {\n                    var axisCopy = find(chartCopy.axes,\n                        function (copy) {\n                            return copy.options.internalKey ===\n                                axis.userOptions.internalKey;\n                    }), extremes = axis.getExtremes(), userMin = extremes.userMin, userMax = extremes.userMax;\n                    if (axisCopy &&\n                        ((typeof userMin !== 'undefined' &&\n                            userMin !== axisCopy.min) || (typeof userMax !== 'undefined' &&\n                            userMax !== axisCopy.max))) {\n                        axisCopy.setExtremes(userMin, userMax, true, false);\n                    }\n                });\n                // Get the SVG from the container's innerHTML\n                svg = chartCopy.getChartHTML();\n                fireEvent(this, 'getSVG', { chartCopy: chartCopy });\n                svg = chart.sanitizeSVG(svg, options);\n                // free up memory\n                options = null;\n                chartCopy.destroy();\n                discardElement(sandbox);\n                return svg;\n            }\n            /**\n             * @private\n             * @function Highcharts.Chart#getSVGForExport\n             */\n            function getSVGForExport(options, chartOptions) {\n                var chartExportingOptions = this.options.exporting;\n                return this.getSVG(merge({ chart: { borderRadius: 0 } }, chartExportingOptions.chartOptions, chartOptions, {\n                    exporting: {\n                        sourceWidth: ((options && options.sourceWidth) ||\n                            chartExportingOptions.sourceWidth),\n                        sourceHeight: ((options && options.sourceHeight) ||\n                            chartExportingOptions.sourceHeight)\n                    }\n                }));\n            }\n            /**\n             * Make hyphenated property names out of camelCase\n             * @private\n             * @param {string} prop\n             * Property name in camelCase\n             * @return {string}\n             * Hyphenated property name\n             */\n            function hyphenate(prop) {\n                return prop.replace(/([A-Z])/g, function (a, b) {\n                    return '-' + b.toLowerCase();\n                });\n            }\n            /**\n             * Analyze inherited styles from stylesheets and add them inline\n             *\n             * @private\n             * @function Highcharts.Chart#inlineStyles\n             *\n             * @todo What are the border styles for text about? In general, text has a\n             *       lot of properties.\n             *\n             * @todo Make it work with IE9 and IE10.\n             *\n             * @requires modules/exporting\n             */\n            function inlineStyles() {\n                var blacklist = inlineBlacklist,\n                    whitelist = Exporting.inlineWhitelist, // For IE\n                    defaultStyles = {};\n                var dummySVG;\n                // Create an iframe where we read default styles without pollution from\n                // this body\n                var iframe = doc.createElement('iframe');\n                css(iframe, {\n                    width: '1px',\n                    height: '1px',\n                    visibility: 'hidden'\n                });\n                doc.body.appendChild(iframe);\n                var iframeDoc = (iframe.contentWindow && iframe.contentWindow.document);\n                if (iframeDoc) {\n                    iframeDoc.body.appendChild(iframeDoc.createElementNS(SVG_NS, 'svg'));\n                }\n                /**\n                 * Call this on all elements and recurse to children\n                 * @private\n                 * @param {Highcharts.HTMLDOMElement} node\n                 *        Element child\n                     */\n                function recurse(node) {\n                    var filteredStyles = {};\n                    var styles,\n                        parentStyles, \n                        // cssText = '',\n                        dummy,\n                        styleAttr,\n                        blacklisted,\n                        whitelisted,\n                        i;\n                    /**\n                     * Check computed styles and whether they are in the white/blacklist\n                     * for styles or atttributes.\n                     * @private\n                     * @param {string} val\n                     *        Style value\n                     * @param {string} prop\n                     *        Style property name\n                             */\n                    function filterStyles(val, prop) {\n                        // Check against whitelist & blacklist\n                        blacklisted = whitelisted = false;\n                        if (whitelist.length) {\n                            // Styled mode in IE has a whitelist instead.\n                            // Exclude all props not in this list.\n                            i = whitelist.length;\n                            while (i-- && !whitelisted) {\n                                whitelisted = whitelist[i].test(prop);\n                            }\n                            blacklisted = !whitelisted;\n                        }\n                        // Explicitly remove empty transforms\n                        if (prop === 'transform' && val === 'none') {\n                            blacklisted = true;\n                        }\n                        i = blacklist.length;\n                        while (i-- && !blacklisted) {\n                            blacklisted = (blacklist[i].test(prop) ||\n                                typeof val === 'function');\n                        }\n                        if (!blacklisted) {\n                            // If parent node has the same style, it gets inherited, no\n                            // need to inline it. Top-level props should be diffed\n                            // against parent (#7687).\n                            if ((parentStyles[prop] !== val ||\n                                node.nodeName === 'svg') &&\n                                defaultStyles[node.nodeName][prop] !== val) {\n                                // Attributes\n                                if (!inlineToAttributes ||\n                                    inlineToAttributes.indexOf(prop) !== -1) {\n                                    if (val) {\n                                        node.setAttribute(hyphenate(prop), val);\n                                    }\n                                    // Styles\n                                }\n                                else if (prop !== 'parentRule') {\n                                    filteredStyles[prop] = val;\n                                }\n                            }\n                        }\n                    }\n                    if (iframeDoc &&\n                        node.nodeType === 1 &&\n                        unstyledElements.indexOf(node.nodeName) === -1) {\n                        styles = win.getComputedStyle(node, null);\n                        parentStyles = node.nodeName === 'svg' ?\n                            {} :\n                            win.getComputedStyle(node.parentNode, null);\n                        // Get default styles from the browser so that we don't have to\n                        // add these\n                        if (!defaultStyles[node.nodeName]) {\n                            /*\n                            if (!dummySVG) {\n                                dummySVG = doc.createElementNS(H.SVG_NS, 'svg');\n                                dummySVG.setAttribute('version', '1.1');\n                                doc.body.appendChild(dummySVG);\n                            }\n                            */\n                            dummySVG = iframeDoc.getElementsByTagName('svg')[0];\n                            dummy = iframeDoc.createElementNS(node.namespaceURI, node.nodeName);\n                            dummySVG.appendChild(dummy);\n                            // Copy, so we can remove the node\n                            defaultStyles[node.nodeName] = merge(win.getComputedStyle(dummy, null));\n                            // Remove default fill, otherwise text disappears when\n                            // exported\n                            if (node.nodeName === 'text') {\n                                delete defaultStyles.text.fill;\n                            }\n                            dummySVG.removeChild(dummy);\n                        }\n                        // Loop through all styles and add them inline if they are ok\n                        for (var p in styles) {\n                            if (\n                            // Some browsers put lots of styles on the prototype...\n                            G.isFirefox ||\n                                G.isMS ||\n                                G.isSafari || // #16902\n                                // ... Chrome puts them on the instance\n                                Object.hasOwnProperty.call(styles, p)) {\n                                filterStyles(styles[p], p);\n                            }\n                        }\n                        // Apply styles\n                        /*\n                        if (cssText) {\n                            styleAttr = node.getAttribute('style');\n                            node.setAttribute(\n                                'style',\n                                (styleAttr ? styleAttr + ';' : '') + cssText\n                            );\n                        }\n                        */\n                        css(node, filteredStyles);\n                        // Set default stroke width (needed at least for IE)\n                        if (node.nodeName === 'svg') {\n                            node.setAttribute('stroke-width', '1px');\n                        }\n                        if (node.nodeName === 'text') {\n                            return;\n                        }\n                        // Recurse\n                        [].forEach.call(node.children || node.childNodes, recurse);\n                    }\n                }\n                /**\n                 * Remove the dummy objects used to get defaults\n                 * @private\n                 */\n                function tearDown() {\n                    dummySVG.parentNode.removeChild(dummySVG);\n                    // Remove trash from DOM that stayed after each exporting\n                    iframe.parentNode.removeChild(iframe);\n                }\n                recurse(this.container.querySelector('svg'));\n                tearDown();\n            }\n            /**\n             * Move the chart container(s) to another div.\n             *\n             * @function Highcharts#moveContainers\n             *\n             * @private\n             *\n             * @param {Highcharts.HTMLDOMElement} moveTo\n             *        Move target\n             */\n            function moveContainers(moveTo) {\n                var chart = this;\n                (chart.fixedDiv ? // When scrollablePlotArea is active (#9533)\n                    [chart.fixedDiv, chart.scrollingContainer] :\n                    [chart.container]).forEach(function (div) {\n                    moveTo.appendChild(div);\n                });\n            }\n            /**\n             * Add update methods to handle chart.update and chart.exporting.update and\n             * chart.navigation.update. These must be added to the chart instance rather\n             * than the Chart prototype in order to use the chart instance inside the\n             * update function.\n             * @private\n             */\n            function onChartInit() {\n                var chart = this, \n                    /**\n                     * @private\n                     * @param {\"exporting\"|\"navigation\"} prop\n                     *        Property name in option root\n                     * @param {Highcharts.ExportingOptions|Highcharts.NavigationOptions} options\n                     *        Options to update\n                     * @param {boolean} [redraw=true]\n                     *        Whether to redraw\n                             */\n                    update = function (prop,\n                    options,\n                    redraw) {\n                        chart.isDirtyExporting = true;\n                    merge(true, chart.options[prop], options);\n                    if (pick(redraw, true)) {\n                        chart.redraw();\n                    }\n                };\n                chart.exporting = {\n                    update: function (options, redraw) {\n                        update('exporting', options, redraw);\n                    }\n                };\n                // Register update() method for navigation. Can not be set the same way\n                // as for exporting, because navigation options are shared with bindings\n                // which has separate update() logic.\n                ChartNavigationComposition\n                    .compose(chart).navigation\n                    .addUpdate(function (options, redraw) {\n                    update('navigation', options, redraw);\n                });\n            }\n            /**\n             * Exporting module required. Clears away other elements in the page and\n             * prints the chart as it is displayed. By default, when the exporting\n             * module is enabled, a context button with a drop down menu in the upper\n             * right corner accesses this function.\n             *\n             * @sample highcharts/members/chart-print/\n             *         Print from a HTML button\n             *\n             * @function Highcharts.Chart#print\n             *\n             *\n             * @emits Highcharts.Chart#event:beforePrint\n             * @emits Highcharts.Chart#event:afterPrint\n             *\n             * @requires modules/exporting\n             */\n            function print() {\n                var chart = this;\n                if (chart.isPrinting) { // block the button while in printing mode\n                    return;\n                }\n                printingChart = chart;\n                if (!G.isSafari) {\n                    chart.beforePrint();\n                }\n                // Give the browser time to draw WebGL content, an issue that randomly\n                // appears (at least) in Chrome ~67 on the Mac (#8708).\n                setTimeout(function () {\n                    win.focus(); // #1510\n                    win.print();\n                    // allow the browser to prepare before reverting\n                    if (!G.isSafari) {\n                        setTimeout(function () {\n                            chart.afterPrint();\n                        }, 1000);\n                    }\n                }, 1);\n            }\n            /**\n             * Add the buttons on chart load\n             * @private\n             * @function Highcharts.Chart#renderExporting\n             * @requires modules/exporting\n             */\n            function renderExporting() {\n                var chart = this,\n                    exportingOptions = chart.options.exporting,\n                    buttons = exportingOptions.buttons,\n                    isDirty = chart.isDirtyExporting || !chart.exportSVGElements;\n                chart.buttonOffset = 0;\n                if (chart.isDirtyExporting) {\n                    chart.destroyExport();\n                }\n                if (isDirty && exportingOptions.enabled !== false) {\n                    chart.exportEvents = [];\n                    chart.exportingGroup = chart.exportingGroup ||\n                        chart.renderer.g('exporting-group').attr({\n                            zIndex: 3 // #4955, // #8392\n                        }).add();\n                    objectEach(buttons, function (button) {\n                        chart.addButton(button);\n                    });\n                    chart.isDirtyExporting = false;\n                }\n            }\n            /**\n             * Exporting module only. A collection of fixes on the produced SVG to\n             * account for expando properties, browser bugs, VML problems and other.\n             * Returns a cleaned SVG.\n             *\n             * @private\n             * @function Highcharts.Chart#sanitizeSVG\n             * @param {string} svg\n             *        SVG code to sanitize\n             * @param {Highcharts.Options} options\n             *        Chart options to apply\n             * @return {string}\n             *         Sanitized SVG code\n             * @requires modules/exporting\n             */\n            function sanitizeSVG(svg, options) {\n                var split = svg.indexOf('</svg>') + 6;\n                var html = svg.substr(split);\n                // Remove any HTML added to the container after the SVG (#894, #9087)\n                svg = svg.substr(0, split);\n                // Move HTML into a foreignObject\n                if (options && options.exporting && options.exporting.allowHTML) {\n                    if (html) {\n                        html = '<foreignObject x=\"0\" y=\"0\" ' +\n                            'width=\"' + options.chart.width + '\" ' +\n                            'height=\"' + options.chart.height + '\">' +\n                            '<body xmlns=\"http://www.w3.org/1999/xhtml\">' +\n                            // Some tags needs to be closed in xhtml (#13726)\n                            html.replace(/(<(?:img|br).*?(?=\\>))>/g, '$1 />') +\n                            '</body>' +\n                            '</foreignObject>';\n                        svg = svg.replace('</svg>', html + '</svg>');\n                    }\n                }\n                svg = svg\n                    .replace(/zIndex=\"[^\"]+\"/g, '')\n                    .replace(/symbolName=\"[^\"]+\"/g, '')\n                    .replace(/jQuery[0-9]+=\"[^\"]+\"/g, '')\n                    .replace(/url\\((\"|&quot;)(.*?)(\"|&quot;)\\;?\\)/g, 'url($2)')\n                    .replace(/url\\([^#]+#/g, 'url(#')\n                    .replace(/<svg /, '<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" ')\n                    .replace(/ (|NS[0-9]+\\:)href=/g, ' xlink:href=') // #3567\n                    .replace(/\\n/, ' ')\n                    // Batik doesn't support rgba fills and strokes (#3095)\n                    .replace(/(fill|stroke)=\"rgba\\(([ 0-9]+,[ 0-9]+,[ 0-9]+),([ 0-9\\.]+)\\)\"/g, // eslint-disable-line max-len\n                '$1=\"rgb($2)\" $1-opacity=\"$3\"')\n                    // Replace HTML entities, issue #347\n                    .replace(/&nbsp;/g, '\\u00A0') // no-break space\n                    .replace(/&shy;/g, '\\u00AD'); // soft hyphen\n                // Further sanitize for oldIE\n                if (this.ieSanitizeSVG) {\n                    svg = this.ieSanitizeSVG(svg);\n                }\n                return svg;\n            }\n        })(Exporting || (Exporting = {}));\n        /* *\n         *\n         *  Registry\n         *\n         * */\n        defaultOptions.exporting = merge(ExportingDefaults.exporting, defaultOptions.exporting);\n        defaultOptions.lang = merge(ExportingDefaults.lang, defaultOptions.lang);\n        // Buttons and menus are collected in a separate config option set called\n        // 'navigation'. This can be extended later to add control buttons like\n        // zoom and pan right click menus.\n        /**\n         * A collection of options for buttons and menus appearing in the exporting\n         * module or in Stock Tools.\n         *\n         * @requires     modules/exporting\n         * @optionparent navigation\n         */\n        defaultOptions.navigation = merge(ExportingDefaults.navigation, defaultOptions.navigation);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Gets fired after a chart is printed through the context menu item or the\n         * Chart.print method.\n         *\n         * @callback Highcharts.ExportingAfterPrintCallbackFunction\n         *\n         * @param {Highcharts.Chart} chart\n         *        The chart on which the event occured.\n         *\n         * @param {global.Event} event\n         *        The event that occured.\n         */\n        /**\n         * Gets fired before a chart is printed through the context menu item or the\n         * Chart.print method.\n         *\n         * @callback Highcharts.ExportingBeforePrintCallbackFunction\n         *\n         * @param {Highcharts.Chart} chart\n         *        The chart on which the event occured.\n         *\n         * @param {global.Event} event\n         *        The event that occured.\n         */\n        /**\n         * Function to call if the offline-exporting module fails to export a chart on\n         * the client side.\n         *\n         * @callback Highcharts.ExportingErrorCallbackFunction\n         *\n         * @param {Highcharts.ExportingOptions} options\n         *        The exporting options.\n         *\n         * @param {global.Error} err\n         *        The error from the module.\n         */\n        /**\n         * Definition for a menu item in the context menu.\n         *\n         * @interface Highcharts.ExportingMenuObject\n         */ /**\n        * The text for the menu item.\n        *\n        * @name Highcharts.ExportingMenuObject#text\n        * @type {string|undefined}\n        */ /**\n        * If internationalization is required, the key to a language string.\n        *\n        * @name Highcharts.ExportingMenuObject#textKey\n        * @type {string|undefined}\n        */ /**\n        * The click handler for the menu item.\n        *\n        * @name Highcharts.ExportingMenuObject#onclick\n        * @type {Highcharts.EventCallbackFunction<Highcharts.Chart>|undefined}\n        */ /**\n        * Indicates a separator line instead of an item.\n        *\n        * @name Highcharts.ExportingMenuObject#separator\n        * @type {boolean|undefined}\n        */\n        /**\n         * Possible MIME types for exporting.\n         *\n         * @typedef {\"image/png\"|\"image/jpeg\"|\"application/pdf\"|\"image/svg+xml\"} Highcharts.ExportingMimeTypeValue\n         */\n        (''); // keeps doclets above in transpiled file\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * Fires after a chart is printed through the context menu item or the\n         * `Chart.print` method.\n         *\n         * @sample highcharts/chart/events-beforeprint-afterprint/\n         *         Rescale the chart to print\n         *\n         * @type      {Highcharts.ExportingAfterPrintCallbackFunction}\n         * @since     4.1.0\n         * @context   Highcharts.Chart\n         * @requires  modules/exporting\n         * @apioption chart.events.afterPrint\n         */\n        /**\n         * Fires before a chart is printed through the context menu item or\n         * the `Chart.print` method.\n         *\n         * @sample highcharts/chart/events-beforeprint-afterprint/\n         *         Rescale the chart to print\n         *\n         * @type      {Highcharts.ExportingBeforePrintCallbackFunction}\n         * @since     4.1.0\n         * @context   Highcharts.Chart\n         * @requires  modules/exporting\n         * @apioption chart.events.beforePrint\n         */\n        (''); // keeps doclets above in transpiled file\n\n        return Exporting;\n    });\n    _registerModule(_modules, 'masters/modules/exporting.src.js', [_modules['Core/Globals.js'], _modules['Extensions/Exporting/Exporting.js'], _modules['Core/HttpUtilities.js']], function (Highcharts, Exporting, HttpUtilities) {\n\n        var G = Highcharts;\n        G.HttpUtilities = HttpUtilities;\n        G.ajax = HttpUtilities.ajax;\n        G.getJSON = HttpUtilities.getJSON;\n        G.post = HttpUtilities.post;\n        Exporting.compose(G.Chart, G.Renderer);\n\n    });\n}));"]},"metadata":{},"sourceType":"script"}